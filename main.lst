;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11/05/2019 12:26:25
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040A52  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x0008CE  	2254
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x0008B0  	2224
0x0040	0x000958  	2392
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000A80  	2688
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0A52	0x2083CF  	MOV	#2108, W15
0x0A54	0x217FF0  	MOV	#6143, W0
0x0A56	0xB7A020  	MOV	WREG, SPLIM
0x0A58	0x200010  	MOV	#1, W0
0x0A5A	0xB7A034  	MOV	WREG, PSVPAG
0x0A5C	0x200040  	MOV	#4, W0
0x0A5E	0xB72044  	IOR	CORCON
0x0A60	0x000000020A9C  	CALL	2716
;main.c,163 :: 		void main() {
;main.c,166 :: 		set_LEDGREEN();
0x0A64	0x781F8A  	PUSH	W10
0x0A66	0x07FF22  	RCALL	_set_LEDGREEN
;main.c,167 :: 		Clear_buffer(Input);
0x0A68	0x21800A  	MOV	#lo_addr(_input), W10
0x0A6A	0x07FEA0  	RCALL	_Clear_buffer
;main.c,168 :: 		dau_set_ID(&DAU_ID);
0x0A6C	0x20832A  	MOV	#lo_addr(_DAU_ID), W10
0x0A6E	0x07FE84  	RCALL	_dau_set_ID
;main.c,169 :: 		adc_init();
0x0A70	0x07FEAF  	RCALL	_adc_init
;main.c,170 :: 		tmr4_init();
0x0A72	0x07FEF0  	RCALL	_tmr4_init
;main.c,171 :: 		can_bus_init();
0x0A74	0x07FEEC  	RCALL	_can_bus_init
;main.c,172 :: 		tmr5_init();
0x0A76	0x07FE63  	RCALL	_tmr5_init
;main.c,173 :: 		io_init();
0x0A78	0x07FE0F  	RCALL	_io_init
;main.c,176 :: 		while(1){
L_main10:
;main.c,193 :: 		}
0x0A7A	0x37FFFF  	BRA	L_main10
;main.c,195 :: 		}
L_end_main:
0x0A7C	0x78054F  	POP	W10
L__main_end_loop:
0x0A7E	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_set_LEDGREEN:
;User_Function.c,168 :: 		void set_LEDGREEN(void){
;User_Function.c,169 :: 		LEDGREEN = 1;
0x08AC	0xA8C2E9  	BSET	LATGbits, #14
;User_Function.c,170 :: 		}
L_end_set_LEDGREEN:
0x08AE	0x060000  	RETURN
; end of _set_LEDGREEN
_Clear_buffer:
;User_Function.c,22 :: 		void Clear_buffer(ydata unsigned **input){
;User_Function.c,23 :: 		int Channel_Index, Buffer_Index = 0;
;User_Function.c,25 :: 		for (Channel_Index = 0; Channel_Index < N_CHANNEL; Channel_Index++){
; Channel_Index start address is: 4 (W2)
0x07AC	0xEF2004  	CLR	W2
; Channel_Index end address is: 4 (W2)
L_Clear_buffer0:
; Channel_Index start address is: 4 (W2)
0x07AE	0xE11070  	CP	W2, #16
0x07B0	0x3D000E  	BRA GE	L_Clear_buffer1
L__Clear_buffer32:
;User_Function.c,26 :: 		for(Buffer_Index = 0; Buffer_Index < BUFFER_SIZE; Buffer_Index++){
; Buffer_Index start address is: 6 (W3)
0x07B2	0xEF2006  	CLR	W3
; Buffer_Index end address is: 6 (W3)
; Channel_Index end address is: 4 (W2)
L_Clear_buffer3:
; Buffer_Index start address is: 6 (W3)
; Channel_Index start address is: 4 (W2)
0x07B4	0x200200  	MOV	#32, W0
0x07B6	0xE11800  	CP	W3, W0
0x07B8	0x3D0008  	BRA GE	L_Clear_buffer4
L__Clear_buffer33:
;User_Function.c,28 :: 		input[Channel_Index][Buffer_Index] = 0;
0x07BA	0xDD1041  	SL	W2, #1, W0
0x07BC	0x450080  	ADD	W10, W0, W1
0x07BE	0xDD1841  	SL	W3, #1, W0
0x07C0	0x400091  	ADD	W0, [W1], W1
0x07C2	0xEF2000  	CLR	W0
0x07C4	0x780880  	MOV	W0, [W1]
;User_Function.c,26 :: 		for(Buffer_Index = 0; Buffer_Index < BUFFER_SIZE; Buffer_Index++){
0x07C6	0xEC2006  	INC	W3
;User_Function.c,29 :: 		}
; Buffer_Index end address is: 6 (W3)
0x07C8	0x37FFF5  	BRA	L_Clear_buffer3
L_Clear_buffer4:
;User_Function.c,25 :: 		for (Channel_Index = 0; Channel_Index < N_CHANNEL; Channel_Index++){
0x07CA	0xEC2004  	INC	W2
;User_Function.c,30 :: 		}
; Channel_Index end address is: 4 (W2)
0x07CC	0x37FFF0  	BRA	L_Clear_buffer0
L_Clear_buffer1:
;User_Function.c,31 :: 		}
L_end_Clear_buffer:
0x07CE	0x060000  	RETURN
; end of _Clear_buffer
_dau_set_ID:
;User_Function.c,125 :: 		uint8_t dau_set_ID(uint8_t * DAU_ID){
;User_Function.c,126 :: 		if (SELBIT0 == 0 && SELBIT1 == 0){
0x0778	0xAF82E0  	BTSC.B	PORTFbits, #4
0x077A	0x370006  	BRA	L__dau_set_ID26
0x077C	0xAFA2E0  	BTSC.B	PORTFbits, #5
0x077E	0x370004  	BRA	L__dau_set_ID25
L__dau_set_ID24:
;User_Function.c,127 :: 		*DAU_ID = DAU_FL;
0x0780	0xEF2000  	CLR	W0
0x0782	0x784D00  	MOV.B	W0, [W10]
;User_Function.c,128 :: 		return DAU_ID_OK;
0x0784	0xEF2000  	CLR	W0
0x0786	0x370011  	BRA	L_end_dau_set_ID
;User_Function.c,126 :: 		if (SELBIT0 == 0 && SELBIT1 == 0){
L__dau_set_ID26:
L__dau_set_ID25:
;User_Function.c,130 :: 		else if (SELBIT0 == 1 && SELBIT1 == 0){
0x0788	0xAE82E0  	BTSS.B	PORTFbits, #4
0x078A	0x370006  	BRA	L__dau_set_ID28
0x078C	0xAFA2E0  	BTSC.B	PORTFbits, #5
0x078E	0x370004  	BRA	L__dau_set_ID27
L__dau_set_ID23:
;User_Function.c,131 :: 		*DAU_ID = DAU_FR;
0x0790	0xB3C010  	MOV.B	#1, W0
0x0792	0x784D00  	MOV.B	W0, [W10]
;User_Function.c,132 :: 		return DAU_ID_OK;
0x0794	0xEF2000  	CLR	W0
0x0796	0x370009  	BRA	L_end_dau_set_ID
;User_Function.c,130 :: 		else if (SELBIT0 == 1 && SELBIT1 == 0){
L__dau_set_ID28:
L__dau_set_ID27:
;User_Function.c,134 :: 		else if(SELBIT0 == 0 && SELBIT1 == 1){
0x0798	0xAF82E0  	BTSC.B	PORTFbits, #4
0x079A	0x370006  	BRA	L__dau_set_ID30
0x079C	0xAEA2E0  	BTSS.B	PORTFbits, #5
0x079E	0x370004  	BRA	L__dau_set_ID29
L__dau_set_ID22:
;User_Function.c,135 :: 		*DAU_ID = DAU_REAR;
0x07A0	0xB3C020  	MOV.B	#2, W0
0x07A2	0x784D00  	MOV.B	W0, [W10]
;User_Function.c,136 :: 		return DAU_ID_OK;
0x07A4	0xEF2000  	CLR	W0
0x07A6	0x370001  	BRA	L_end_dau_set_ID
;User_Function.c,134 :: 		else if(SELBIT0 == 0 && SELBIT1 == 1){
L__dau_set_ID30:
L__dau_set_ID29:
;User_Function.c,138 :: 		else return DAU_ID_ERROR;
0x07A8	0xB3C010  	MOV.B	#1, W0
;User_Function.c,139 :: 		}
L_end_dau_set_ID:
0x07AA	0x060000  	RETURN
; end of _dau_set_ID
_adc_init:
;User_Function.c,61 :: 		uint8_t adc_init(void){
;User_Function.c,63 :: 		IEC0bits.ADIE     = 0b1;               //adc interrupt enable
0x07D0	0xA8608D  	BSET	IEC0bits, #11
;User_Function.c,64 :: 		IPC2bits.ADIP     = 0b001;             //adc interrupt priority
0x07D2	0x210000  	MOV	#4096, W0
0x07D4	0x780080  	MOV	W0, W1
0x07D6	0x200980  	MOV	#lo_addr(IPC2bits), W0
0x07D8	0x688090  	XOR	W1, [W0], W1
0x07DA	0x270000  	MOV	#28672, W0
0x07DC	0x608080  	AND	W1, W0, W1
0x07DE	0x200980  	MOV	#lo_addr(IPC2bits), W0
0x07E0	0x688090  	XOR	W1, [W0], W1
0x07E2	0x8804C1  	MOV	W1, IPC2bits
;User_Function.c,65 :: 		IFS0bits.ADIF     = 0b0;               //clear interrupt flag
0x07E4	0xA96085  	BCLR	IFS0bits, #11
;User_Function.c,67 :: 		ADPCFG            = 0b000000000000000; //All Analog input pin in Analog mode, port read input disabled, A/D samples pin voltage
0x07E6	0xEF22A8  	CLR	ADPCFG
;User_Function.c,68 :: 		ADCON3bits.ADCS   = 0b011000;          //set Tad of the ADC          x24Tcy
0x07E8	0xB3C180  	MOV.B	#24, W0
0x07EA	0x784080  	MOV.B	W0, W1
0x07EC	0x202A40  	MOV	#lo_addr(ADCON3bits), W0
0x07EE	0x68C090  	XOR.B	W1, [W0], W1
0x07F0	0xB3C3F0  	MOV.B	#63, W0
0x07F2	0x60C080  	AND.B	W1, W0, W1
0x07F4	0x202A40  	MOV	#lo_addr(ADCON3bits), W0
0x07F6	0x68C090  	XOR.B	W1, [W0], W1
0x07F8	0x202A40  	MOV	#lo_addr(ADCON3bits), W0
0x07FA	0x784801  	MOV.B	W1, [W0]
;User_Function.c,69 :: 		ADCON3bits.ADRC   = 0b0;              // clock from system
0x07FC	0xA9E2A4  	BCLR	ADCON3bits, #7
;User_Function.c,70 :: 		ADCON3bits.SAMC   = 0b00010;          // 2Tad
0x07FE	0x202000  	MOV	#512, W0
0x0800	0x780080  	MOV	W0, W1
0x0802	0x202A40  	MOV	#lo_addr(ADCON3bits), W0
0x0804	0x688090  	XOR	W1, [W0], W1
0x0806	0x21F000  	MOV	#7936, W0
0x0808	0x608080  	AND	W1, W0, W1
0x080A	0x202A40  	MOV	#lo_addr(ADCON3bits), W0
0x080C	0x688090  	XOR	W1, [W0], W1
0x080E	0x881521  	MOV	W1, ADCON3bits
;User_Function.c,72 :: 		ADCON2bits.ALTS   = 0b0;              //Always use MUX A input multiplexer settings
0x0810	0xA902A2  	BCLR	ADCON2bits, #0
;User_Function.c,73 :: 		ADCON2bits.BUFM   = 0b0;              //Buffer configured as one 16-word buffer ADCBUF(15...0)
0x0812	0xA922A2  	BCLR	ADCON2bits, #1
;User_Function.c,74 :: 		ADCON2bits.SMPI   = 0b1111;            //Interrupts at the completion of conversion for each 16th sample/convert sequence
0x0814	0x202A20  	MOV	#lo_addr(ADCON2bits), W0
0x0816	0x784090  	MOV.B	[W0], W1
0x0818	0xB3C3C0  	MOV.B	#60, W0
0x081A	0x70C080  	IOR.B	W1, W0, W1
0x081C	0x202A20  	MOV	#lo_addr(ADCON2bits), W0
0x081E	0x784801  	MOV.B	W1, [W0]
;User_Function.c,75 :: 		ADCON2bits.CSCNA  = 0b1;              //Scan inputs
0x0820	0xA842A3  	BSET	ADCON2bits, #10
;User_Function.c,76 :: 		ADCON2bits.VCFG   = 0b000;            //internal voltage reference VDD
0x0822	0x801511  	MOV	ADCON2bits, W1
0x0824	0x21FFF0  	MOV	#8191, W0
0x0826	0x608000  	AND	W1, W0, W0
0x0828	0xB7A2A2  	MOV	WREG, ADCON2bits
;User_Function.c,78 :: 		ADCON1bits.ASAM   = 0b1;              // Sampling begins immediately after last conversion completes. SAMP bit is auto set
0x082A	0xA842A0  	BSET	ADCON1bits, #2
;User_Function.c,79 :: 		ADCON1bits.SSRC   = 0b111;            //Internal counter ends sampling and starts conversion (auto convert)
0x082C	0x202A00  	MOV	#lo_addr(ADCON1bits), W0
0x082E	0x784090  	MOV.B	[W0], W1
0x0830	0xB3CE00  	MOV.B	#224, W0
0x0832	0x70C080  	IOR.B	W1, W0, W1
0x0834	0x202A00  	MOV	#lo_addr(ADCON1bits), W0
0x0836	0x784801  	MOV.B	W1, [W0]
;User_Function.c,80 :: 		ADCON1bits.FORM   = 0b00;             //data output integer
0x0838	0x801501  	MOV	ADCON1bits, W1
0x083A	0x2FCFF0  	MOV	#64767, W0
0x083C	0x608000  	AND	W1, W0, W0
0x083E	0xB7A2A0  	MOV	WREG, ADCON1bits
;User_Function.c,81 :: 		ADCON1bits.ADSIDL = 0b0;              // Continue module operation in Idle mode
0x0840	0xA9A2A1  	BCLR	ADCON1bits, #13
;User_Function.c,82 :: 		ADCON1bits.ADON   = 0b0;
0x0842	0xA9E2A1  	BCLR	ADCON1bits, #15
;User_Function.c,84 :: 		ADCSSL = 0xFFFF;     //scan ALL inputs
0x0844	0x2FFFF0  	MOV	#65535, W0
0x0846	0xB7A2AA  	MOV	WREG, ADCSSL
;User_Function.c,85 :: 		ADCHSbits.CH0NA = 0; //negative input for sampling Vref-
0x0848	0xA982A6  	BCLR	ADCHSbits, #4
;User_Function.c,87 :: 		return ADC_OK;
0x084A	0xEF2000  	CLR	W0
;User_Function.c,89 :: 		}
L_end_adc_init:
0x084C	0x060000  	RETURN
; end of _adc_init
_tmr4_init:
;User_Function.c,93 :: 		void tmr4_init(void){
;User_Function.c,95 :: 		T4CONbits.TON   = 0b1;
0x0854	0xA8E11F  	BSET	T4CONbits, #15
;User_Function.c,96 :: 		T4CONbits.TSIDL = 0b0;     //Continue timer operation in Idle mode
0x0856	0xA9A11F  	BCLR	T4CONbits, #13
;User_Function.c,97 :: 		T4CONbits.TGATE = 0b0;     //no gated time
0x0858	0xA9C11E  	BCLR	T4CONbits, #6
;User_Function.c,98 :: 		T4CONbits.TCKPS = 0b00;    //prescaler
0x085A	0x2011E0  	MOV	#lo_addr(T4CONbits), W0
0x085C	0x784090  	MOV.B	[W0], W1
0x085E	0xB3CCF0  	MOV.B	#207, W0
0x0860	0x60C080  	AND.B	W1, W0, W1
0x0862	0x2011E0  	MOV	#lo_addr(T4CONbits), W0
0x0864	0x784801  	MOV.B	W1, [W0]
;User_Function.c,99 :: 		T4CONbits.TCS = 0b0;       //Internal clock (FOSC/4)
0x0866	0xA9211E  	BCLR	T4CONbits, #1
;User_Function.c,102 :: 		T4CONbits.T32 = 0b0;       //16 bit timer, separated from timer5
0x0868	0xA9611E  	BCLR	T4CONbits, #3
;User_Function.c,103 :: 		IPC5bits.T4IP = 0b011;     //interrupt priority 3
0x086A	0xB3C300  	MOV.B	#48, W0
0x086C	0x784080  	MOV.B	W0, W1
0x086E	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0870	0x68C090  	XOR.B	W1, [W0], W1
0x0872	0xB3C700  	MOV.B	#112, W0
0x0874	0x60C080  	AND.B	W1, W0, W1
0x0876	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0878	0x68C090  	XOR.B	W1, [W0], W1
0x087A	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x087C	0x784801  	MOV.B	W1, [W0]
;User_Function.c,105 :: 		IFS1bits.T4IF = 0b0;       //clear interrupt
0x087E	0xA9A086  	BCLR	IFS1bits, #5
;User_Function.c,106 :: 		IEC1bits.T4IE = 0b1;       //enable interrupt
0x0880	0xA8A08E  	BSET	IEC1bits, #5
;User_Function.c,108 :: 		TMR4 = 0b0;
0x0882	0xEF2114  	CLR	TMR4
;User_Function.c,109 :: 		PR4  = 0b0000110100000101;       // 3333 * 50ns = 167 us --> 6 KHz
0x0884	0x20D050  	MOV	#3333, W0
0x0886	0xB7A11A  	MOV	WREG, PR4
;User_Function.c,111 :: 		}
L_end_tmr4_init:
0x0888	0x060000  	RETURN
; end of _tmr4_init
_can_bus_init:
;User_Function.c,53 :: 		void can_bus_init(void){
;User_Function.c,55 :: 		CAN_Init();
0x084E	0x07FEED  	RCALL	_Can_init
;User_Function.c,56 :: 		Can_resetWritePacket();
0x0850	0x07001C  	RCALL	_Can_resetWritePacket
;User_Function.c,58 :: 		}
L_end_can_bus_init:
0x0852	0x060000  	RETURN
; end of _can_bus_init
_Can_init:
;can.c,28 :: 		void Can_init() {
;can.c,29 :: 		unsigned int Can_Init_flags = 0;
0x062A	0x781F8A  	PUSH	W10
0x062C	0x781F8B  	PUSH	W11
0x062E	0x781F8C  	PUSH	W12
0x0630	0x781F8D  	PUSH	W13
;can.c,36 :: 		CAN1Initialize(2,4,3,4,2,Can_Init_flags);          // SJW,BRP,PHSEG1,PHSEG2,PROPSEG
0x0632	0x20004D  	MOV	#4, W13
0x0634	0x20003C  	MOV	#3, W12
0x0636	0x20004B  	MOV	#4, W11
0x0638	0x20002A  	MOV	#2, W10
0x063A	0x200FB0  	MOV	#251, W0
0x063C	0x781F80  	PUSH	W0
0x063E	0x200020  	MOV	#2, W0
0x0640	0x781F80  	PUSH	W0
0x0642	0x07FE1D  	RCALL	_CAN1Initialize
0x0644	0xB1004F  	SUB	#4, W15
;can.c,37 :: 		CAN1SetOperationMode(_CAN_MODE_CONFIG,0xFF);
0x0646	0x200FFB  	MOV	#255, W11
0x0648	0x20004A  	MOV	#4, W10
0x064A	0x07FDF2  	RCALL	_CAN1SetOperationMode
;can.c,39 :: 		CAN1SetMask(_CAN_MASK_B1, AUX_MASK, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
0x064C	0x200FFD  	MOV	#255, W13
0x064E	0x20FF8B  	MOV	#4088, W11
0x0650	0x20000C  	MOV	#0, W12
0x0652	0xEF2014  	CLR	W10
0x0654	0x07FDA2  	RCALL	_CAN1SetMask
;can.c,40 :: 		CAN1SetFilter(_CAN_FILTER_B1_F1, AUX_FILTER, _CAN_CONFIG_STD_MSG);
0x0656	0x200FFD  	MOV	#255, W13
0x0658	0x207F0B  	MOV	#2032, W11
0x065A	0x20000C  	MOV	#0, W12
0x065C	0xEF2014  	CLR	W10
0x065E	0x07FDB1  	RCALL	_CAN1SetFilter
;can.c,41 :: 		CAN1SetFilter(_CAN_FILTER_B1_F2, 0, _CAN_CONFIG_STD_MSG);
0x0660	0x200FFD  	MOV	#255, W13
0x0662	0xEF2016  	CLR	W11
0x0664	0xEF2018  	CLR	W12
0x0666	0x20001A  	MOV	#1, W10
0x0668	0x07FDAC  	RCALL	_CAN1SetFilter
;can.c,43 :: 		CAN1SetMask(_CAN_MASK_B2, 0, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
0x066A	0x200FFD  	MOV	#255, W13
0x066C	0xEF2016  	CLR	W11
0x066E	0xEF2018  	CLR	W12
0x0670	0x20001A  	MOV	#1, W10
0x0672	0x07FD93  	RCALL	_CAN1SetMask
;can.c,44 :: 		CAN1SetFilter(_CAN_FILTER_B2_F1, 0, _CAN_CONFIG_STD_MSG);
0x0674	0x200FFD  	MOV	#255, W13
0x0676	0xEF2016  	CLR	W11
0x0678	0xEF2018  	CLR	W12
0x067A	0x20002A  	MOV	#2, W10
0x067C	0x07FDA2  	RCALL	_CAN1SetFilter
;can.c,46 :: 		CAN1SetOperationMode(_CAN_MODE_NORMAL,0xFF);
0x067E	0x200FFB  	MOV	#255, W11
0x0680	0xEF2014  	CLR	W10
0x0682	0x07FDD6  	RCALL	_CAN1SetOperationMode
;can.c,48 :: 		Can_initInterrupt();
0x0684	0x07FE6E  	RCALL	_Can_initInterrupt
;can.c,49 :: 		Can_setWritePriority(CAN_PRIORITY_MEDIUM);
0x0686	0x200FDA  	MOV	#253, W10
0x0688	0x07FE6A  	RCALL	_Can_setWritePriority
;can.c,50 :: 		}
L_end_Can_init:
0x068A	0x7806CF  	POP	W13
0x068C	0x78064F  	POP	W12
0x068E	0x7805CF  	POP	W11
0x0690	0x78054F  	POP	W10
0x0692	0x060000  	RETURN
; end of _Can_init
_CAN1Initialize:
0x027E	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,829 :: 		
0x0280	0x781F8A  	PUSH	W10
0x0282	0x781F8B  	PUSH	W11
0x0284	0x781F8C  	PUSH	W12
0x0286	0x781F8D  	PUSH	W13
; PROPSEG start address is: 4 (W2)
0x0288	0x97B94E  	MOV	[W14-8], W2
; CAN_CONFIG_FLAGS start address is: 12 (W6)
0x028A	0x97BB3E  	MOV	[W14-10], W6
;__Lib_CAN_12.c,835 :: 		
0x028C	0xA96391  	BCLR	C1CTRLbits, #11
;__Lib_CAN_12.c,836 :: 		
0x028E	0xA98391  	BCLR	C1CTRLbits, #12
;__Lib_CAN_12.c,837 :: 		
0x0290	0xA9A391  	BCLR	C1CTRLbits, #13
;__Lib_CAN_12.c,838 :: 		
0x0292	0xA9E391  	BCLR	C1CTRLbits, #15
;__Lib_CAN_12.c,843 :: 		
0x0294	0xBE9F8A  	PUSH.D	W10
0x0296	0x200FFB  	MOV	#255, W11
0x0298	0x20004A  	MOV	#4, W10
0x029A	0x07FFCA  	RCALL	_CAN1SetOperationMode
0x029C	0xBE054F  	POP.D	W10
;__Lib_CAN_12.c,849 :: 		
;__Lib_CAN_12.c,848 :: 		
;__Lib_CAN_12.c,847 :: 		
;__Lib_CAN_12.c,846 :: 		
;__Lib_CAN_12.c,851 :: 		
0x029E	0x781F86  	PUSH	W6
;__Lib_CAN_12.c,850 :: 		
0x02A0	0x781F82  	PUSH	W2
; PROPSEG end address is: 4 (W2)
;__Lib_CAN_12.c,851 :: 		
0x02A2	0x07FF2E  	RCALL	_CAN1SetBaudRate
0x02A4	0xB1004F  	SUB	#4, W15
;__Lib_CAN_12.c,853 :: 		
0x02A6	0x630070  	AND	W6, #16, W0
;__Lib_CAN_12.c,854 :: 		
0x02A8	0xE10070  	CP	W0, #16
0x02AA	0x3A0001  	BRA NZ	L_CAN1Initialize59
L__CAN1Initialize153:
;__Lib_CAN_12.c,855 :: 		
0x02AC	0xA8438E  	BSET.B	C1RX0CONbits, #2
L_CAN1Initialize59:
;__Lib_CAN_12.c,858 :: 		
0x02AE	0xAEA00C  	BTSS	W6, #5
0x02B0	0x370021  	BRA	L_CAN1Initialize60
;__Lib_CAN_12.c,859 :: 		
0x02B2	0xAE600C  	BTSS	W6, #3
0x02B4	0x370010  	BRA	L_CAN1Initialize61
; CAN_CONFIG_FLAGS end address is: 12 (W6)
;__Lib_CAN_12.c,860 :: 		
0x02B6	0x200FFD  	MOV	#255, W13
0x02B8	0xEF2016  	CLR	W11
0x02BA	0xEF2018  	CLR	W12
0x02BC	0xEF2014  	CLR	W10
0x02BE	0x07FF6D  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,861 :: 		
0x02C0	0x200FFD  	MOV	#255, W13
0x02C2	0xEF2016  	CLR	W11
0x02C4	0xEF2018  	CLR	W12
0x02C6	0x20001A  	MOV	#1, W10
0x02C8	0x07FF68  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,862 :: 		
; FilterConfig1 start address is: 0 (W0)
0x02CA	0x200FF0  	MOV	#255, W0
;__Lib_CAN_12.c,863 :: 		
; FilterConfig2 start address is: 2 (W1)
0x02CC	0x200FF1  	MOV	#255, W1
;__Lib_CAN_12.c,864 :: 		
0x02CE	0x781F81  	PUSH	W1
; FilterConfig1 end address is: 0 (W0)
; FilterConfig2 end address is: 2 (W1)
0x02D0	0x780080  	MOV	W0, W1
0x02D2	0x78004F  	POP	W0
0x02D4	0x37000C  	BRA	L_CAN1Initialize62
L_CAN1Initialize61:
;__Lib_CAN_12.c,866 :: 		
0x02D6	0x200F7D  	MOV	#247, W13
0x02D8	0xEF2016  	CLR	W11
0x02DA	0xEF2018  	CLR	W12
0x02DC	0xEF2014  	CLR	W10
0x02DE	0x07FF5D  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,867 :: 		
0x02E0	0x200F7D  	MOV	#247, W13
0x02E2	0xEF2016  	CLR	W11
0x02E4	0xEF2018  	CLR	W12
0x02E6	0x20001A  	MOV	#1, W10
0x02E8	0x07FF58  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,868 :: 		
; FilterConfig1 start address is: 2 (W1)
0x02EA	0x200F71  	MOV	#247, W1
;__Lib_CAN_12.c,869 :: 		
; FilterConfig2 start address is: 0 (W0)
0x02EC	0x200F70  	MOV	#247, W0
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
;__Lib_CAN_12.c,870 :: 		
L_CAN1Initialize62:
;__Lib_CAN_12.c,871 :: 		
; FilterConfig2 start address is: 0 (W0)
; FilterConfig1 start address is: 2 (W1)
0x02EE	0x780281  	MOV	W1, W5
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
0x02F0	0x780200  	MOV	W0, W4
0x02F2	0x37000E  	BRA	L_CAN1Initialize63
L_CAN1Initialize60:
;__Lib_CAN_12.c,873 :: 		
0x02F4	0x200DFD  	MOV	#223, W13
0x02F6	0xEF2016  	CLR	W11
0x02F8	0xEF2018  	CLR	W12
0x02FA	0xEF2014  	CLR	W10
0x02FC	0x07FF4E  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,874 :: 		
0x02FE	0x200DFD  	MOV	#223, W13
0x0300	0xEF2016  	CLR	W11
0x0302	0xEF2018  	CLR	W12
0x0304	0x20001A  	MOV	#1, W10
0x0306	0x07FF49  	RCALL	_CAN1SetMask
;__Lib_CAN_12.c,875 :: 		
; FilterConfig1 start address is: 2 (W1)
0x0308	0x200FF1  	MOV	#255, W1
;__Lib_CAN_12.c,876 :: 		
; FilterConfig2 start address is: 0 (W0)
0x030A	0x200F70  	MOV	#247, W0
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
0x030C	0x780281  	MOV	W1, W5
0x030E	0x780200  	MOV	W0, W4
;__Lib_CAN_12.c,877 :: 		
L_CAN1Initialize63:
;__Lib_CAN_12.c,882 :: 		
; FilterConfig2 start address is: 8 (W4)
; FilterConfig1 start address is: 10 (W5)
0x0310	0x780685  	MOV	W5, W13
0x0312	0xEF2016  	CLR	W11
0x0314	0xEF2018  	CLR	W12
0x0316	0xEF2014  	CLR	W10
0x0318	0x07FF54  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,883 :: 		
0x031A	0x780685  	MOV	W5, W13
; FilterConfig1 end address is: 10 (W5)
0x031C	0xEF2016  	CLR	W11
0x031E	0xEF2018  	CLR	W12
0x0320	0x20001A  	MOV	#1, W10
0x0322	0x07FF4F  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,884 :: 		
0x0324	0x780684  	MOV	W4, W13
0x0326	0xEF2016  	CLR	W11
0x0328	0xEF2018  	CLR	W12
0x032A	0x20002A  	MOV	#2, W10
0x032C	0x07FF4A  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,885 :: 		
0x032E	0x780684  	MOV	W4, W13
0x0330	0xEF2016  	CLR	W11
0x0332	0xEF2018  	CLR	W12
0x0334	0x20003A  	MOV	#3, W10
0x0336	0x07FF45  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,886 :: 		
0x0338	0x780684  	MOV	W4, W13
0x033A	0xEF2016  	CLR	W11
0x033C	0xEF2018  	CLR	W12
0x033E	0x20004A  	MOV	#4, W10
0x0340	0x07FF40  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,887 :: 		
0x0342	0x780684  	MOV	W4, W13
; FilterConfig2 end address is: 8 (W4)
0x0344	0xEF2016  	CLR	W11
0x0346	0xEF2018  	CLR	W12
0x0348	0x20005A  	MOV	#5, W10
0x034A	0x07FF3B  	RCALL	_CAN1SetFilter
;__Lib_CAN_12.c,890 :: 		
0x034C	0x200FFB  	MOV	#255, W11
0x034E	0xEF2014  	CLR	W10
0x0350	0x07FF6F  	RCALL	_CAN1SetOperationMode
;__Lib_CAN_12.c,891 :: 		
L_end_CAN1Initialize:
0x0352	0x7806CF  	POP	W13
0x0354	0x78064F  	POP	W12
0x0356	0x7805CF  	POP	W11
0x0358	0x78054F  	POP	W10
0x035A	0xFA8000  	ULNK
0x035C	0x060000  	RETURN
; end of _CAN1Initialize
_CAN1SetOperationMode:
0x0230	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,340 :: 		
;__Lib_CAN_12.c,341 :: 		
0x0232	0xE20016  	CP0	W11
0x0234	0x320017  	BRA Z	L_CAN1SetOperationMode13
L__CAN1SetOperationMode133:
;__Lib_CAN_12.c,343 :: 		
0x0236	0x78008A  	MOV	W10, W1
0x0238	0xB3C080  	MOV.B	#8, W0
0x023A	0xFB0000  	SE	W0, W0
0x023C	0xDD0880  	SL	W1, W0, W1
0x023E	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x0240	0x688090  	XOR	W1, [W0], W1
0x0242	0x207000  	MOV	#1792, W0
0x0244	0x608080  	AND	W1, W0, W1
0x0246	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x0248	0x688090  	XOR	W1, [W0], W1
0x024A	0x881C81  	MOV	W1, C1CTRLbits
;__Lib_CAN_12.c,345 :: 		
L_CAN1SetOperationMode14:
0x024C	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x024E	0x784010  	MOV.B	[W0], W0
0x0250	0x784080  	MOV.B	W0, W1
0x0252	0xB3CE00  	MOV.B	#224, W0
0x0254	0x60C080  	AND.B	W1, W0, W1
0x0256	0xFB8001  	ZE	W1, W0
0x0258	0xDE00C5  	LSR	W0, #5, W1
0x025A	0xFB8001  	ZE	W1, W0
0x025C	0xE1000A  	CP	W0, W10
0x025E	0x320001  	BRA Z	L_CAN1SetOperationMode15
L__CAN1SetOperationMode134:
0x0260	0x37FFF5  	BRA	L_CAN1SetOperationMode14
L_CAN1SetOperationMode15:
;__Lib_CAN_12.c,346 :: 		
0x0262	0x37000B  	BRA	L_CAN1SetOperationMode16
L_CAN1SetOperationMode13:
;__Lib_CAN_12.c,349 :: 		
0x0264	0x78008A  	MOV	W10, W1
0x0266	0xB3C080  	MOV.B	#8, W0
0x0268	0xFB0000  	SE	W0, W0
0x026A	0xDD0880  	SL	W1, W0, W1
0x026C	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x026E	0x688090  	XOR	W1, [W0], W1
0x0270	0x207000  	MOV	#1792, W0
0x0272	0x608080  	AND	W1, W0, W1
0x0274	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x0276	0x688090  	XOR	W1, [W0], W1
0x0278	0x881C81  	MOV	W1, C1CTRLbits
;__Lib_CAN_12.c,351 :: 		
L_CAN1SetOperationMode16:
;__Lib_CAN_12.c,352 :: 		
L_end_CAN1SetOperationMode:
0x027A	0xFA8000  	ULNK
0x027C	0x060000  	RETURN
; end of _CAN1SetOperationMode
_CAN1SetBaudRate:
0x0100	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,432 :: 		
; PROPSEG start address is: 2 (W1)
0x0102	0x97B8CE  	MOV	[W14-8], W1
; CAN_CONFIG_FLAGS start address is: 8 (W4)
0x0104	0x97BA3E  	MOV	[W14-10], W4
;__Lib_CAN_12.c,435 :: 		
0x0106	0x550061  	SUB	W10, #1, W0
0x0108	0x780500  	MOV	W0, W10
;__Lib_CAN_12.c,436 :: 		
0x010A	0x558061  	SUB	W11, #1, W0
0x010C	0x780580  	MOV	W0, W11
;__Lib_CAN_12.c,437 :: 		
0x010E	0x560061  	SUB	W12, #1, W0
0x0110	0x780600  	MOV	W0, W12
;__Lib_CAN_12.c,438 :: 		
0x0112	0x568061  	SUB	W13, #1, W0
0x0114	0x780680  	MOV	W0, W13
;__Lib_CAN_12.c,439 :: 		
; PROPSEG start address is: 10 (W5)
0x0116	0x5082E1  	SUB	W1, #1, W5
; PROPSEG end address is: 2 (W1)
;__Lib_CAN_12.c,441 :: 		
0x0118	0x78418A  	MOV.B	W10, W3
0x011A	0xB3C060  	MOV.B	#6, W0
0x011C	0xFB8083  	ZE	W3, W1
0x011E	0xFB0100  	SE	W0, W2
0x0120	0xDD0982  	SL	W1, W2, W3
0x0122	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0124	0x69C190  	XOR.B	W3, [W0], W3
0x0126	0xB3CC00  	MOV.B	#192, W0
0x0128	0x61C180  	AND.B	W3, W0, W3
0x012A	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x012C	0x69C190  	XOR.B	W3, [W0], W3
0x012E	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0130	0x784803  	MOV.B	W3, [W0]
;__Lib_CAN_12.c,442 :: 		
0x0132	0x78408B  	MOV.B	W11, W1
0x0134	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0136	0x68C090  	XOR.B	W1, [W0], W1
0x0138	0xB3C3F0  	MOV.B	#63, W0
0x013A	0x60C080  	AND.B	W1, W0, W1
0x013C	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x013E	0x68C090  	XOR.B	W1, [W0], W1
0x0140	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0142	0x784801  	MOV.B	W1, [W0]
;__Lib_CAN_12.c,443 :: 		
0x0144	0x784085  	MOV.B	W5, W1
; PROPSEG end address is: 10 (W5)
0x0146	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0148	0x68C090  	XOR.B	W1, [W0], W1
0x014A	0x60C0E7  	AND.B	W1, #7, W1
0x014C	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x014E	0x68C090  	XOR.B	W1, [W0], W1
0x0150	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0152	0x784801  	MOV.B	W1, [W0]
;__Lib_CAN_12.c,444 :: 		
0x0154	0x78418C  	MOV.B	W12, W3
0x0156	0xB3C030  	MOV.B	#3, W0
0x0158	0xFB8083  	ZE	W3, W1
0x015A	0xFB0100  	SE	W0, W2
0x015C	0xDD0982  	SL	W1, W2, W3
0x015E	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0160	0x69C190  	XOR.B	W3, [W0], W3
0x0162	0xB3C380  	MOV.B	#56, W0
0x0164	0x61C180  	AND.B	W3, W0, W3
0x0166	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0168	0x69C190  	XOR.B	W3, [W0], W3
0x016A	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x016C	0x784803  	MOV.B	W3, [W0]
;__Lib_CAN_12.c,445 :: 		
0x016E	0x78008D  	MOV	W13, W1
0x0170	0xB3C080  	MOV.B	#8, W0
0x0172	0xFB0000  	SE	W0, W0
0x0174	0xDD0880  	SL	W1, W0, W1
0x0176	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0178	0x688090  	XOR	W1, [W0], W1
0x017A	0x207000  	MOV	#1792, W0
0x017C	0x608080  	AND	W1, W0, W1
0x017E	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0180	0x688090  	XOR	W1, [W0], W1
0x0182	0x881CA1  	MOV	W1, C1CFG2bits
;__Lib_CAN_12.c,447 :: 		
0x0184	0xAF4008  	BTSC	W4, #2
0x0186	0x370001  	BRA	L_CAN1SetBaudRate17
;__Lib_CAN_12.c,448 :: 		
0x0188	0xA8C394  	BSET	C1CFG2bits, #6
L_CAN1SetBaudRate17:
;__Lib_CAN_12.c,450 :: 		
0x018A	0xAE0008  	BTSS	W4, #0
0x018C	0x370001  	BRA	L_CAN1SetBaudRate18
;__Lib_CAN_12.c,451 :: 		
0x018E	0xA8E394  	BSET	C1CFG2bits, #7
L_CAN1SetBaudRate18:
;__Lib_CAN_12.c,453 :: 		
0x0190	0xAE2008  	BTSS	W4, #1
0x0192	0x370001  	BRA	L_CAN1SetBaudRate19
; CAN_CONFIG_FLAGS end address is: 8 (W4)
;__Lib_CAN_12.c,454 :: 		
0x0194	0xA8C395  	BSET	C1CFG2bits, #14
L_CAN1SetBaudRate19:
;__Lib_CAN_12.c,455 :: 		
L_end_CAN1SetBaudRate:
0x0196	0xFA8000  	ULNK
0x0198	0x060000  	RETURN
; end of _CAN1SetBaudRate
_CAN1SetMask:
0x019A	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,476 :: 		
;__Lib_CAN_12.c,478 :: 		
0x019C	0x781F8A  	PUSH	W10
0x019E	0x781F8D  	PUSH	W13
0x01A0	0xE15060  	CP	W10, #0
0x01A2	0x3A0006  	BRA NZ	L_CAN1SetMask20
L__CAN1SetMask138:
;__Lib_CAN_12.c,479 :: 		
0x01A4	0x781F8D  	PUSH	W13
0x01A6	0x20330A  	MOV	#lo_addr(C1RXM0SID), W10
0x01A8	0xEF201A  	CLR	W13
0x01AA	0x07014E  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01AC	0xB1002F  	SUB	#2, W15
0x01AE	0x370005  	BRA	L_CAN1SetMask21
L_CAN1SetMask20:
;__Lib_CAN_12.c,482 :: 		
0x01B0	0x781F8D  	PUSH	W13
0x01B2	0x20338A  	MOV	#lo_addr(C1RXM1SID), W10
0x01B4	0xEF201A  	CLR	W13
0x01B6	0x070148  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01B8	0xB1002F  	SUB	#2, W15
L_CAN1SetMask21:
;__Lib_CAN_12.c,483 :: 		
L_end_CAN1SetMask:
0x01BA	0x7806CF  	POP	W13
0x01BC	0x78054F  	POP	W10
0x01BE	0xFA8000  	ULNK
0x01C0	0x060000  	RETURN
; end of _CAN1SetMask
__Lib_CAN_12_CAN1IDToRegs:
0x0448	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,253 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x044A	0x97B8CE  	MOV	[W14-8], W1
;__Lib_CAN_12.c,254 :: 		
0x044C	0x37008B  	BRA	L___Lib_CAN_12_CAN1IDToRegs0
;__Lib_CAN_12.c,255 :: 		
L___Lib_CAN_12_CAN1IDToRegs2:
;__Lib_CAN_12.c,256 :: 		
0x044E	0xAE6002  	BTSS	W1, #3
0x0450	0x370003  	BRA	L___Lib_CAN_12_CAN1IDToRegs3
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_12.c,258 :: 		
0x0452	0xDD5842  	SL	W11, #2, W0
0x0454	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,260 :: 		
0x0456	0x370019  	BRA	L___Lib_CAN_12_CAN1IDToRegs4
L___Lib_CAN_12_CAN1IDToRegs3:
;__Lib_CAN_12.c,262 :: 		
0x0458	0x200163  	MOV	#lo_addr(W11), W3
0x045A	0x418062  	ADD	W3, #2, W0
0x045C	0x780090  	MOV	[W0], W1
0x045E	0x21FFC0  	MOV	#8188, W0
0x0460	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_12.c,263 :: 		
0x0462	0x78001A  	MOV	[W10], W0
0x0464	0x700061  	IOR	W0, #1, W0
0x0466	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,264 :: 		
0x0468	0x450162  	ADD	W10, #2, W2
0x046A	0x780502  	MOV	W2, W10
;__Lib_CAN_12.c,265 :: 		
0x046C	0x418062  	ADD	W3, #2, W0
0x046E	0x780010  	MOV	[W0], W0
0x0470	0x600063  	AND	W0, #3, W0
0x0472	0xDD00CA  	SL	W0, #10, W1
0x0474	0xDE5846  	LSR	W11, #6, W0
0x0476	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_12.c,266 :: 		
0x0478	0x450162  	ADD	W10, #2, W2
0x047A	0x780502  	MOV	W2, W10
;__Lib_CAN_12.c,267 :: 		
0x047C	0x780092  	MOV	[W2], W1
0x047E	0x203FF0  	MOV	#1023, W0
0x0480	0x608900  	AND	W1, W0, [W2]
;__Lib_CAN_12.c,268 :: 		
0x0482	0x2003F0  	MOV	#63, W0
0x0484	0x658000  	AND	W11, W0, W0
0x0486	0xDD004A  	SL	W0, #10, W0
0x0488	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,269 :: 		
L___Lib_CAN_12_CAN1IDToRegs4:
;__Lib_CAN_12.c,270 :: 		
0x048A	0x370072  	BRA	L___Lib_CAN_12_CAN1IDToRegs1
;__Lib_CAN_12.c,272 :: 		
L___Lib_CAN_12_CAN1IDToRegs5:
;__Lib_CAN_12.c,273 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x048C	0xAEA002  	BTSS	W1, #5
0x048E	0x37001F  	BRA	L___Lib_CAN_12_CAN1IDToRegs6
;__Lib_CAN_12.c,274 :: 		
0x0490	0xAE6002  	BTSS	W1, #3
0x0492	0x370006  	BRA	L___Lib_CAN_12_CAN1IDToRegs7
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_12.c,276 :: 		
0x0494	0xDD5842  	SL	W11, #2, W0
0x0496	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,277 :: 		
0x0498	0x78001A  	MOV	[W10], W0
0x049A	0x700061  	IOR	W0, #1, W0
0x049C	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,278 :: 		
0x049E	0x370016  	BRA	L___Lib_CAN_12_CAN1IDToRegs8
L___Lib_CAN_12_CAN1IDToRegs7:
;__Lib_CAN_12.c,280 :: 		
0x04A0	0x200163  	MOV	#lo_addr(W11), W3
0x04A2	0x418062  	ADD	W3, #2, W0
0x04A4	0x780090  	MOV	[W0], W1
0x04A6	0x21FFC0  	MOV	#8188, W0
0x04A8	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_12.c,281 :: 		
0x04AA	0x78001A  	MOV	[W10], W0
0x04AC	0x700061  	IOR	W0, #1, W0
0x04AE	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,282 :: 		
0x04B0	0x450162  	ADD	W10, #2, W2
0x04B2	0x780502  	MOV	W2, W10
;__Lib_CAN_12.c,283 :: 		
0x04B4	0x418062  	ADD	W3, #2, W0
0x04B6	0x780010  	MOV	[W0], W0
0x04B8	0x600063  	AND	W0, #3, W0
0x04BA	0xDD00CA  	SL	W0, #10, W1
0x04BC	0xDE5846  	LSR	W11, #6, W0
0x04BE	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_12.c,284 :: 		
0x04C0	0x4500E2  	ADD	W10, #2, W1
0x04C2	0x780501  	MOV	W1, W10
;__Lib_CAN_12.c,285 :: 		
0x04C4	0x2003F0  	MOV	#63, W0
0x04C6	0x658000  	AND	W11, W0, W0
0x04C8	0xDD004A  	SL	W0, #10, W0
0x04CA	0x780880  	MOV	W0, [W1]
;__Lib_CAN_12.c,286 :: 		
L___Lib_CAN_12_CAN1IDToRegs8:
;__Lib_CAN_12.c,287 :: 		
0x04CC	0x370016  	BRA	L___Lib_CAN_12_CAN1IDToRegs9
L___Lib_CAN_12_CAN1IDToRegs6:
;__Lib_CAN_12.c,289 :: 		
0x04CE	0x200163  	MOV	#lo_addr(W11), W3
0x04D0	0x418062  	ADD	W3, #2, W0
0x04D2	0x780090  	MOV	[W0], W1
0x04D4	0x21FFC0  	MOV	#8188, W0
0x04D6	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_12.c,290 :: 		
0x04D8	0x78009A  	MOV	[W10], W1
0x04DA	0x2FFFE0  	MOV	#65534, W0
0x04DC	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_12.c,291 :: 		
0x04DE	0x450162  	ADD	W10, #2, W2
0x04E0	0x780502  	MOV	W2, W10
;__Lib_CAN_12.c,292 :: 		
0x04E2	0x418062  	ADD	W3, #2, W0
0x04E4	0x780010  	MOV	[W0], W0
0x04E6	0x600063  	AND	W0, #3, W0
0x04E8	0xDD00CA  	SL	W0, #10, W1
0x04EA	0xDE5846  	LSR	W11, #6, W0
0x04EC	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_12.c,293 :: 		
0x04EE	0x4500E2  	ADD	W10, #2, W1
0x04F0	0x780501  	MOV	W1, W10
;__Lib_CAN_12.c,294 :: 		
0x04F2	0x2003F0  	MOV	#63, W0
0x04F4	0x658000  	AND	W11, W0, W0
0x04F6	0xDD004A  	SL	W0, #10, W0
0x04F8	0x780880  	MOV	W0, [W1]
;__Lib_CAN_12.c,295 :: 		
L___Lib_CAN_12_CAN1IDToRegs9:
;__Lib_CAN_12.c,296 :: 		
0x04FA	0x37003A  	BRA	L___Lib_CAN_12_CAN1IDToRegs1
;__Lib_CAN_12.c,298 :: 		
L___Lib_CAN_12_CAN1IDToRegs10:
;__Lib_CAN_12.c,299 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x04FC	0xAE6002  	BTSS	W1, #3
0x04FE	0x37000C  	BRA	L___Lib_CAN_12_CAN1IDToRegs11
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_12.c,301 :: 		
0x0500	0x2003F0  	MOV	#63, W0
0x0502	0x658000  	AND	W11, W0, W0
0x0504	0xDD0042  	SL	W0, #2, W0
0x0506	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,302 :: 		
0x0508	0x2FFC00  	MOV	#65472, W0
0x050A	0x658000  	AND	W11, W0, W0
0x050C	0xDD0045  	SL	W0, #5, W0
0x050E	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_12.c,303 :: 		
0x0510	0x78009A  	MOV	[W10], W1
0x0512	0x2FFFE0  	MOV	#65534, W0
0x0514	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_12.c,304 :: 		
0x0516	0x370025  	BRA	L___Lib_CAN_12_CAN1IDToRegs12
L___Lib_CAN_12_CAN1IDToRegs11:
;__Lib_CAN_12.c,306 :: 		
0x0518	0x200163  	MOV	#lo_addr(W11), W3
0x051A	0x418062  	ADD	W3, #2, W0
0x051C	0x780090  	MOV	[W0], W1
0x051E	0x21F000  	MOV	#7936, W0
0x0520	0x608000  	AND	W1, W0, W0
0x0522	0xDD0043  	SL	W0, #3, W0
0x0524	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,307 :: 		
0x0526	0x4180E2  	ADD	W3, #2, W1
0x0528	0x200FC0  	MOV	#252, W0
0x052A	0x600011  	AND	W0, [W1], W0
0x052C	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_12.c,308 :: 		
0x052E	0x78001A  	MOV	[W10], W0
0x0530	0x700061  	IOR	W0, #1, W0
0x0532	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_12.c,309 :: 		
0x0534	0x450162  	ADD	W10, #2, W2
0x0536	0x780502  	MOV	W2, W10
;__Lib_CAN_12.c,310 :: 		
0x0538	0x418062  	ADD	W3, #2, W0
0x053A	0x780010  	MOV	[W0], W0
0x053C	0x600063  	AND	W0, #3, W0
0x053E	0xDD00CE  	SL	W0, #14, W1
0x0540	0x2C0000  	MOV	#49152, W0
0x0542	0x658000  	AND	W11, W0, W0
0x0544	0xDE0042  	LSR	W0, #2, W0
0x0546	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_12.c,311 :: 		
0x0548	0x23FC00  	MOV	#16320, W0
0x054A	0x658000  	AND	W11, W0, W0
0x054C	0xDE0046  	LSR	W0, #6, W0
0x054E	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_12.c,312 :: 		
0x0550	0x4500E2  	ADD	W10, #2, W1
0x0552	0x780501  	MOV	W1, W10
;__Lib_CAN_12.c,313 :: 		
0x0554	0x2003F0  	MOV	#63, W0
0x0556	0x658000  	AND	W11, W0, W0
0x0558	0xDD004A  	SL	W0, #10, W0
0x055A	0x780880  	MOV	W0, [W1]
;__Lib_CAN_12.c,314 :: 		
0x055C	0x78009A  	MOV	[W10], W1
0x055E	0x201800  	MOV	#384, W0
0x0560	0x708D00  	IOR	W1, W0, [W10]
;__Lib_CAN_12.c,315 :: 		
L___Lib_CAN_12_CAN1IDToRegs12:
;__Lib_CAN_12.c,316 :: 		
0x0562	0x370006  	BRA	L___Lib_CAN_12_CAN1IDToRegs1
;__Lib_CAN_12.c,318 :: 		
L___Lib_CAN_12_CAN1IDToRegs0:
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x0564	0xE16861  	CP	W13, #1
0x0566	0x32FF73  	BRA Z	L___Lib_CAN_12_CAN1IDToRegs2
L___Lib_CAN_12_CAN1IDToRegs129:
0x0568	0xE16860  	CP	W13, #0
0x056A	0x32FF90  	BRA Z	L___Lib_CAN_12_CAN1IDToRegs5
L___Lib_CAN_12_CAN1IDToRegs130:
0x056C	0xE16862  	CP	W13, #2
0x056E	0x32FFC6  	BRA Z	L___Lib_CAN_12_CAN1IDToRegs10
L___Lib_CAN_12_CAN1IDToRegs131:
; CAN_CONFIG_FLAGS end address is: 2 (W1)
L___Lib_CAN_12_CAN1IDToRegs1:
;__Lib_CAN_12.c,319 :: 		
L_end_CAN1IDToRegs:
0x0570	0xFA8000  	ULNK
0x0572	0x060000  	RETURN
; end of __Lib_CAN_12_CAN1IDToRegs
_CAN1SetFilter:
0x01C2	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,505 :: 		
;__Lib_CAN_12.c,508 :: 		
0x01C4	0x781F8A  	PUSH	W10
0x01C6	0x781F8D  	PUSH	W13
0x01C8	0x370024  	BRA	L_CAN1SetFilter22
;__Lib_CAN_12.c,509 :: 		
L_CAN1SetFilter24:
;__Lib_CAN_12.c,510 :: 		
0x01CA	0x781F8D  	PUSH	W13
0x01CC	0x20300A  	MOV	#lo_addr(C1RXF0SID), W10
0x01CE	0x20001D  	MOV	#1, W13
0x01D0	0x07013B  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01D2	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,511 :: 		
0x01D4	0x370029  	BRA	L_CAN1SetFilter23
;__Lib_CAN_12.c,512 :: 		
L_CAN1SetFilter25:
;__Lib_CAN_12.c,513 :: 		
0x01D6	0x781F8D  	PUSH	W13
0x01D8	0x20308A  	MOV	#lo_addr(C1RXF1SID), W10
0x01DA	0x20001D  	MOV	#1, W13
0x01DC	0x070135  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01DE	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,514 :: 		
0x01E0	0x370023  	BRA	L_CAN1SetFilter23
;__Lib_CAN_12.c,515 :: 		
L_CAN1SetFilter26:
;__Lib_CAN_12.c,516 :: 		
0x01E2	0x781F8D  	PUSH	W13
0x01E4	0x20310A  	MOV	#lo_addr(C1RXF2SID), W10
0x01E6	0x20001D  	MOV	#1, W13
0x01E8	0x07012F  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01EA	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,517 :: 		
0x01EC	0x37001D  	BRA	L_CAN1SetFilter23
;__Lib_CAN_12.c,518 :: 		
L_CAN1SetFilter27:
;__Lib_CAN_12.c,519 :: 		
0x01EE	0x781F8D  	PUSH	W13
0x01F0	0x20318A  	MOV	#lo_addr(C1RXF3SID), W10
0x01F2	0x20001D  	MOV	#1, W13
0x01F4	0x070129  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x01F6	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,520 :: 		
0x01F8	0x370017  	BRA	L_CAN1SetFilter23
;__Lib_CAN_12.c,521 :: 		
L_CAN1SetFilter28:
;__Lib_CAN_12.c,522 :: 		
0x01FA	0x781F8D  	PUSH	W13
0x01FC	0x20320A  	MOV	#lo_addr(C1RXF4SID), W10
0x01FE	0x20001D  	MOV	#1, W13
0x0200	0x070123  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x0202	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,523 :: 		
0x0204	0x370011  	BRA	L_CAN1SetFilter23
;__Lib_CAN_12.c,524 :: 		
L_CAN1SetFilter29:
;__Lib_CAN_12.c,525 :: 		
0x0206	0x781F8D  	PUSH	W13
0x0208	0x20328A  	MOV	#lo_addr(C1RXF5SID), W10
0x020A	0x20001D  	MOV	#1, W13
0x020C	0x07011D  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x020E	0xB1002F  	SUB	#2, W15
;__Lib_CAN_12.c,526 :: 		
0x0210	0x37000B  	BRA	L_CAN1SetFilter23
L_CAN1SetFilter22:
0x0212	0xE15060  	CP	W10, #0
0x0214	0x32FFDA  	BRA Z	L_CAN1SetFilter24
L__CAN1SetFilter140:
0x0216	0xE15061  	CP	W10, #1
0x0218	0x32FFDE  	BRA Z	L_CAN1SetFilter25
L__CAN1SetFilter141:
0x021A	0xE15062  	CP	W10, #2
0x021C	0x32FFE2  	BRA Z	L_CAN1SetFilter26
L__CAN1SetFilter142:
0x021E	0xE15063  	CP	W10, #3
0x0220	0x32FFE6  	BRA Z	L_CAN1SetFilter27
L__CAN1SetFilter143:
0x0222	0xE15064  	CP	W10, #4
0x0224	0x32FFEA  	BRA Z	L_CAN1SetFilter28
L__CAN1SetFilter144:
0x0226	0x37FFEF  	BRA	L_CAN1SetFilter29
L_CAN1SetFilter23:
;__Lib_CAN_12.c,527 :: 		
L_end_CAN1SetFilter:
0x0228	0x7806CF  	POP	W13
0x022A	0x78054F  	POP	W10
0x022C	0xFA8000  	ULNK
0x022E	0x060000  	RETURN
; end of _CAN1SetFilter
_Can_initInterrupt:
;can.c,131 :: 		void Can_initInterrupt(void) {
;can.c,133 :: 		INTERRUPT_PROTECT(IEC1BITS.C1IE = 1);
0x0362	0x200420  	MOV	#lo_addr(SRbits), W0
0x0364	0x784010  	MOV.B	[W0], W0
0x0366	0x784080  	MOV.B	W0, W1
0x0368	0xB3CE00  	MOV.B	#224, W0
0x036A	0x60C080  	AND.B	W1, W0, W1
0x036C	0xFB8001  	ZE	W1, W0
0x036E	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x0370	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x0372	0x800293  	MOV	DISICNT, W3
0x0374	0xFC03FF  	DISI	#1023
0x0376	0x200420  	MOV	#lo_addr(SRbits), W0
0x0378	0x784090  	MOV.B	[W0], W1
0x037A	0xB3CE00  	MOV.B	#224, W0
0x037C	0x70C080  	IOR.B	W1, W0, W1
0x037E	0x200420  	MOV	#lo_addr(SRbits), W0
0x0380	0x784801  	MOV.B	W1, [W0]
0x0382	0x000000  	NOP
0x0384	0x000000  	NOP
0x0386	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x0388	0xA8608F  	BSET	IEC1bits, #11
; DISI_save start address is: 8 (W4)
0x038A	0x800294  	MOV	DISICNT, W4
0x038C	0xFC03FF  	DISI	#1023
0x038E	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x0390	0xB3C050  	MOV.B	#5, W0
0x0392	0xFB8083  	ZE	W3, W1
0x0394	0xFB0100  	SE	W0, W2
0x0396	0xDD0982  	SL	W1, W2, W3
0x0398	0x200420  	MOV	#lo_addr(SRbits), W0
0x039A	0x69C190  	XOR.B	W3, [W0], W3
0x039C	0xB3CE00  	MOV.B	#224, W0
0x039E	0x61C180  	AND.B	W3, W0, W3
0x03A0	0x200420  	MOV	#lo_addr(SRbits), W0
0x03A2	0x69C190  	XOR.B	W3, [W0], W3
0x03A4	0x200420  	MOV	#lo_addr(SRbits), W0
0x03A6	0x784803  	MOV.B	W3, [W0]
0x03A8	0x000000  	NOP
0x03AA	0x000000  	NOP
0x03AC	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,134 :: 		INTERRUPT_PROTECT(C1INTEBITS.RXB0IE = 1); //An interrupt is generated everytime that a message passes through the mask in buffer 0
0x03AE	0x200420  	MOV	#lo_addr(SRbits), W0
0x03B0	0x784010  	MOV.B	[W0], W0
0x03B2	0x784080  	MOV.B	W0, W1
0x03B4	0xB3CE00  	MOV.B	#224, W0
0x03B6	0x60C080  	AND.B	W1, W0, W1
0x03B8	0xFB8001  	ZE	W1, W0
0x03BA	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x03BC	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x03BE	0x800293  	MOV	DISICNT, W3
0x03C0	0xFC03FF  	DISI	#1023
0x03C2	0x200420  	MOV	#lo_addr(SRbits), W0
0x03C4	0x784090  	MOV.B	[W0], W1
0x03C6	0xB3CE00  	MOV.B	#224, W0
0x03C8	0x70C080  	IOR.B	W1, W0, W1
0x03CA	0x200420  	MOV	#lo_addr(SRbits), W0
0x03CC	0x784801  	MOV.B	W1, [W0]
0x03CE	0x000000  	NOP
0x03D0	0x000000  	NOP
0x03D2	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x03D4	0xA80398  	BSET.B	C1INTEbits, #0
; DISI_save start address is: 8 (W4)
0x03D6	0x800294  	MOV	DISICNT, W4
0x03D8	0xFC03FF  	DISI	#1023
0x03DA	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x03DC	0xB3C050  	MOV.B	#5, W0
0x03DE	0xFB8083  	ZE	W3, W1
0x03E0	0xFB0100  	SE	W0, W2
0x03E2	0xDD0982  	SL	W1, W2, W3
0x03E4	0x200420  	MOV	#lo_addr(SRbits), W0
0x03E6	0x69C190  	XOR.B	W3, [W0], W3
0x03E8	0xB3CE00  	MOV.B	#224, W0
0x03EA	0x61C180  	AND.B	W3, W0, W3
0x03EC	0x200420  	MOV	#lo_addr(SRbits), W0
0x03EE	0x69C190  	XOR.B	W3, [W0], W3
0x03F0	0x200420  	MOV	#lo_addr(SRbits), W0
0x03F2	0x784803  	MOV.B	W3, [W0]
0x03F4	0x000000  	NOP
0x03F6	0x000000  	NOP
0x03F8	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,135 :: 		INTERRUPT_PROTECT(C1INTEBITS.RXB1IE = 1); //Suddividere gli ID da ricevere nei due buffer
0x03FA	0x200420  	MOV	#lo_addr(SRbits), W0
0x03FC	0x784010  	MOV.B	[W0], W0
0x03FE	0x784080  	MOV.B	W0, W1
0x0400	0xB3CE00  	MOV.B	#224, W0
0x0402	0x60C080  	AND.B	W1, W0, W1
0x0404	0xFB8001  	ZE	W1, W0
0x0406	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x0408	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x040A	0x800293  	MOV	DISICNT, W3
0x040C	0xFC03FF  	DISI	#1023
0x040E	0x200420  	MOV	#lo_addr(SRbits), W0
0x0410	0x784090  	MOV.B	[W0], W1
0x0412	0xB3CE00  	MOV.B	#224, W0
0x0414	0x70C080  	IOR.B	W1, W0, W1
0x0416	0x200420  	MOV	#lo_addr(SRbits), W0
0x0418	0x784801  	MOV.B	W1, [W0]
0x041A	0x000000  	NOP
0x041C	0x000000  	NOP
0x041E	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x0420	0xA82398  	BSET.B	C1INTEbits, #1
; DISI_save start address is: 8 (W4)
0x0422	0x800294  	MOV	DISICNT, W4
0x0424	0xFC03FF  	DISI	#1023
0x0426	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x0428	0xB3C050  	MOV.B	#5, W0
0x042A	0xFB8083  	ZE	W3, W1
0x042C	0xFB0100  	SE	W0, W2
0x042E	0xDD0982  	SL	W1, W2, W3
0x0430	0x200420  	MOV	#lo_addr(SRbits), W0
0x0432	0x69C190  	XOR.B	W3, [W0], W3
0x0434	0xB3CE00  	MOV.B	#224, W0
0x0436	0x61C180  	AND.B	W3, W0, W3
0x0438	0x200420  	MOV	#lo_addr(SRbits), W0
0x043A	0x69C190  	XOR.B	W3, [W0], W3
0x043C	0x200420  	MOV	#lo_addr(SRbits), W0
0x043E	0x784803  	MOV.B	W3, [W0]
0x0440	0x000000  	NOP
0x0442	0x000000  	NOP
0x0444	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,137 :: 		}
L_end_Can_initInterrupt:
0x0446	0x060000  	RETURN
; end of _Can_initInterrupt
_Can_setWritePriority:
;can.c,96 :: 		void Can_setWritePriority(unsigned int txPriority) {
;can.c,97 :: 		can_txPriority = txPriority;
0x035E	0x88401A  	MOV	W10, _can_txPriority
;can.c,98 :: 		}
L_end_Can_setWritePriority:
0x0360	0x060000  	RETURN
; end of _Can_setWritePriority
_Can_resetWritePacket:
;can.c,100 :: 		void Can_resetWritePacket(void) {
;can.c,101 :: 		for (can_dataOutLength = 0; can_dataOutLength < CAN_PACKET_SIZE; can_dataOutLength += 1) {
0x088A	0xEF2000  	CLR	W0
0x088C	0x884020  	MOV	W0, _can_dataOutLength
L_Can_resetWritePacket9:
0x088E	0x804020  	MOV	_can_dataOutLength, W0
0x0890	0xE10068  	CP	W0, #8
0x0892	0x310009  	BRA GEU	L_Can_resetWritePacket10
L__Can_resetWritePacket29:
;can.c,102 :: 		can_dataOutBuffer[can_dataOutLength] = 0;
0x0894	0x208331  	MOV	#lo_addr(_can_dataOutBuffer), W1
0x0896	0x208040  	MOV	#lo_addr(_can_dataOutLength), W0
0x0898	0x408090  	ADD	W1, [W0], W1
0x089A	0xEF2000  	CLR	W0
0x089C	0x784880  	MOV.B	W0, [W1]
;can.c,101 :: 		for (can_dataOutLength = 0; can_dataOutLength < CAN_PACKET_SIZE; can_dataOutLength += 1) {
0x089E	0x200011  	MOV	#1, W1
0x08A0	0x208040  	MOV	#lo_addr(_can_dataOutLength), W0
0x08A2	0x408810  	ADD	W1, [W0], [W0]
;can.c,103 :: 		}
0x08A4	0x37FFF4  	BRA	L_Can_resetWritePacket9
L_Can_resetWritePacket10:
;can.c,104 :: 		can_dataOutLength = 0;
0x08A6	0xEF2000  	CLR	W0
0x08A8	0x884020  	MOV	W0, _can_dataOutLength
;can.c,105 :: 		}
L_end_Can_resetWritePacket:
0x08AA	0x060000  	RETURN
; end of _Can_resetWritePacket
_tmr5_init:
;User_Function.c,34 :: 		void tmr5_init(void){
;User_Function.c,36 :: 		T5CONbits.TON   = 0b1;
0x073E	0xA8E121  	BSET	T5CONbits, #15
;User_Function.c,37 :: 		T5CONbits.TSIDL = 0b0;     //Continue timer operation in Idle mode
0x0740	0xA9A121  	BCLR	T5CONbits, #13
;User_Function.c,38 :: 		T5CONbits.TGATE = 0b0;     //no gated time
0x0742	0xA9C120  	BCLR	T5CONbits, #6
;User_Function.c,39 :: 		T5CONbits.TCKPS = 0b01;    //prescaler 8
0x0744	0xB3C100  	MOV.B	#16, W0
0x0746	0x784080  	MOV.B	W0, W1
0x0748	0x201200  	MOV	#lo_addr(T5CONbits), W0
0x074A	0x68C090  	XOR.B	W1, [W0], W1
0x074C	0xB3C300  	MOV.B	#48, W0
0x074E	0x60C080  	AND.B	W1, W0, W1
0x0750	0x201200  	MOV	#lo_addr(T5CONbits), W0
0x0752	0x68C090  	XOR.B	W1, [W0], W1
0x0754	0x201200  	MOV	#lo_addr(T5CONbits), W0
0x0756	0x784801  	MOV.B	W1, [W0]
;User_Function.c,40 :: 		T5CONbits.TCS   = 0b0;     //Internal clock (FOSC/4)
0x0758	0xA92120  	BCLR	T5CONbits, #1
;User_Function.c,42 :: 		IPC5bits.T5IP = 0b011;     //interrupt priority 3
0x075A	0x203000  	MOV	#768, W0
0x075C	0x780080  	MOV	W0, W1
0x075E	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0760	0x688090  	XOR	W1, [W0], W1
0x0762	0x207000  	MOV	#1792, W0
0x0764	0x608080  	AND	W1, W0, W1
0x0766	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0768	0x688090  	XOR	W1, [W0], W1
0x076A	0x8804F1  	MOV	W1, IPC5bits
;User_Function.c,44 :: 		IFS1bits.T5IF = 0b0;       //clear interrupt
0x076C	0xA9C086  	BCLR	IFS1bits, #6
;User_Function.c,45 :: 		IEC1bits.T5IE = 0b1;       //enable interrupt
0x076E	0xA8C08E  	BSET	IEC1bits, #6
;User_Function.c,47 :: 		TMR5 = 0b0;
0x0770	0xEF2118  	CLR	TMR5
;User_Function.c,48 :: 		PR5  = 0b0110000110101000;       //25000 * 8 * 50ns -> 0.01 s
0x0772	0x261A80  	MOV	#25000, W0
0x0774	0xB7A11C  	MOV	WREG, PR5
;User_Function.c,50 :: 		}
L_end_tmr5_init:
0x0776	0x060000  	RETURN
; end of _tmr5_init
_io_init:
;User_Function.c,113 :: 		void io_init(void){
;User_Function.c,115 :: 		TRISGbits.TRISG12 = 0;             //LED IOPORT AS OUPUT
0x0698	0xA982E5  	BCLR	TRISGbits, #12
;User_Function.c,116 :: 		TRISGbits.TRISG13 = 0;
0x069A	0xA9A2E5  	BCLR	TRISGbits, #13
;User_Function.c,117 :: 		TRISGbits.TRISG14 = 0;
0x069C	0xA9C2E5  	BCLR	TRISGbits, #14
;User_Function.c,121 :: 		}
L_end_io_init:
0x069E	0x060000  	RETURN
; end of _io_init
0x0A9C	0x208001  	MOV	#lo_addr(main_Channel_Index), W1
0x0A9E	0x280160  	MOV	#32790, W0
0x0AA0	0x090005  	REPEAT	#5
0x0AA2	0x7818B0  	MOV	[W0++], [W1++]
0x0AA4	0x060000  	RETURN
_canInterrupt:
0x0A80	0xF80034  	PUSH	PSVPAG
0x0A82	0xF80036  	PUSH	RCOUNT
0x0A84	0x781F80  	PUSH	W0
0x0A86	0x200020  	MOV	#2, W0
0x0A88	0x09000C  	REPEAT	#12
0x0A8A	0x781FB0  	PUSH	[W0++]
;main.c,46 :: 		void canInterrupt() iv IVT_ADDR_C1INTERRUPT ics ICS_AUTO {
;main.c,48 :: 		Can_clearInterrupt();
0x0A8C	0x07FE03  	RCALL	_Can_clearInterrupt
;main.c,49 :: 		}
L_end_canInterrupt:
0x0A8E	0x2001A0  	MOV	#26, W0
0x0A90	0x09000C  	REPEAT	#12
0x0A92	0x78104F  	POP	[W0--]
0x0A94	0x78004F  	POP	W0
0x0A96	0xF90036  	POP	RCOUNT
0x0A98	0xF90034  	POP	PSVPAG
0x0A9A	0x064000  	RETFIE
; end of _canInterrupt
_Can_clearInterrupt:
;can.c,127 :: 		void Can_clearInterrupt(void) {
;can.c,128 :: 		CAN_INTERRUPT_OCCURRED = 0;
0x0694	0xA96087  	BCLR	IFS1bits, #11
;can.c,129 :: 		}
L_end_Can_clearInterrupt:
0x0696	0x060000  	RETURN
; end of _Can_clearInterrupt
_TIMER5_INT:
0x0958	0xF80034  	PUSH	PSVPAG
0x095A	0xF80036  	PUSH	RCOUNT
0x095C	0x781F80  	PUSH	W0
0x095E	0x200020  	MOV	#2, W0
0x0960	0x09000C  	REPEAT	#12
0x0962	0x781FB0  	PUSH	[W0++]
;main.c,51 :: 		void TIMER5_INT() iv IVT_ADDR_T5INTERRUPT ics ICS_AUTO { //fare lo switch dau
;main.c,53 :: 		switch (DAU_ID){
0x0964	0x781F8A  	PUSH	W10
0x0966	0x781F8B  	PUSH	W11
0x0968	0x370055  	BRA	L_TIMER5_INT0
;main.c,55 :: 		case DAU_REAR :
L_TIMER5_INT2:
;main.c,57 :: 		Can_resetWritePacket();
0x096A	0x07FF8F  	RCALL	_Can_resetWritePacket
;main.c,58 :: 		Can_addIntToWritePacket(data_buffer[LC_1]);
0x096C	0x80407A  	MOV	_data_buffer+2, W10
0x096E	0x07FE98  	RCALL	_Can_addIntToWritePacket
;main.c,59 :: 		Can_addIntToWritePacket(data_buffer[LC_2]);
0x0970	0x80408A  	MOV	_data_buffer+4, W10
0x0972	0x07FE96  	RCALL	_Can_addIntToWritePacket
;main.c,60 :: 		Can_addIntToWritePacket(data_buffer[IN_1]);
0x0974	0x80409A  	MOV	_data_buffer+6, W10
0x0976	0x07FE94  	RCALL	_Can_addIntToWritePacket
;main.c,61 :: 		Can_addIntToWritePacket(data_buffer[IN_2]);
0x0978	0x8040AA  	MOV	_data_buffer+8, W10
0x097A	0x07FE92  	RCALL	_Can_addIntToWritePacket
;main.c,62 :: 		Can_write(DAU_REAR_ID);
0x097C	0x20652A  	MOV	#1618, W10
0x097E	0x20000B  	MOV	#0, W11
0x0980	0x07FEBE  	RCALL	_Can_write
;main.c,64 :: 		Can_resetWritePacket();
0x0982	0x07FF83  	RCALL	_Can_resetWritePacket
;main.c,65 :: 		Can_addIntToWritePacket(data_buffer[IR1]);
0x0984	0x8040DA  	MOV	_data_buffer+14, W10
0x0986	0x07FE8C  	RCALL	_Can_addIntToWritePacket
;main.c,66 :: 		Can_addIntToWritePacket(data_buffer[IR2]);
0x0988	0x8040EA  	MOV	_data_buffer+16, W10
0x098A	0x07FE8A  	RCALL	_Can_addIntToWritePacket
;main.c,67 :: 		Can_addIntToWritePacket(data_buffer[IR3]);
0x098C	0x8040FA  	MOV	_data_buffer+18, W10
0x098E	0x07FE88  	RCALL	_Can_addIntToWritePacket
;main.c,68 :: 		Can_write(IR_RL_ID);
0x0990	0x20656A  	MOV	#1622, W10
0x0992	0x20000B  	MOV	#0, W11
0x0994	0x07FEB4  	RCALL	_Can_write
;main.c,70 :: 		Can_resetWritePacket();
0x0996	0x07FF79  	RCALL	_Can_resetWritePacket
;main.c,71 :: 		Can_addIntToWritePacket(data_buffer[IR4]);
0x0998	0x80410A  	MOV	_data_buffer+20, W10
0x099A	0x07FE82  	RCALL	_Can_addIntToWritePacket
;main.c,72 :: 		Can_addIntToWritePacket(data_buffer[IR5]);
0x099C	0x80411A  	MOV	_data_buffer+22, W10
0x099E	0x07FE80  	RCALL	_Can_addIntToWritePacket
;main.c,73 :: 		Can_addIntToWritePacket(data_buffer[IR6]);
0x09A0	0x80412A  	MOV	_data_buffer+24, W10
0x09A2	0x07FE7E  	RCALL	_Can_addIntToWritePacket
;main.c,74 :: 		Can_write(IR_RR_ID);
0x09A4	0x20657A  	MOV	#1623, W10
0x09A6	0x20000B  	MOV	#0, W11
0x09A8	0x07FEAA  	RCALL	_Can_write
;main.c,76 :: 		break;
0x09AA	0x370040  	BRA	L_TIMER5_INT1
;main.c,78 :: 		case DAU_FR :
L_TIMER5_INT3:
;main.c,80 :: 		Can_resetWritePacket();
0x09AC	0x07FF6E  	RCALL	_Can_resetWritePacket
;main.c,81 :: 		Can_addIntToWritePacket(data_buffer[LC_1]);
0x09AE	0x80407A  	MOV	_data_buffer+2, W10
0x09B0	0x07FE77  	RCALL	_Can_addIntToWritePacket
;main.c,82 :: 		Can_addIntToWritePacket(data_buffer[LC_2]);
0x09B2	0x80408A  	MOV	_data_buffer+4, W10
0x09B4	0x07FE75  	RCALL	_Can_addIntToWritePacket
;main.c,83 :: 		Can_addIntToWritePacket(data_buffer[IN_1]);
0x09B6	0x80409A  	MOV	_data_buffer+6, W10
0x09B8	0x07FE73  	RCALL	_Can_addIntToWritePacket
;main.c,84 :: 		Can_write(DAU_FR_ID);
0x09BA	0x20650A  	MOV	#1616, W10
0x09BC	0x20000B  	MOV	#0, W11
0x09BE	0x07FE9F  	RCALL	_Can_write
;main.c,86 :: 		Can_resetWritePacket();
0x09C0	0x07FF64  	RCALL	_Can_resetWritePacket
;main.c,87 :: 		Can_addIntToWritePacket(data_buffer[IN_2]);
0x09C2	0x8040AA  	MOV	_data_buffer+8, W10
0x09C4	0x07FE6D  	RCALL	_Can_addIntToWritePacket
;main.c,88 :: 		Can_addIntToWritePacket(data_buffer[IN_5_J3]);
0x09C6	0x8040BA  	MOV	_data_buffer+10, W10
0x09C8	0x07FE6B  	RCALL	_Can_addIntToWritePacket
;main.c,89 :: 		Can_write(DAU_FR_APPS_ID);
0x09CA	0x20653A  	MOV	#1619, W10
0x09CC	0x20000B  	MOV	#0, W11
0x09CE	0x07FE97  	RCALL	_Can_write
;main.c,91 :: 		Can_resetWritePacket();
0x09D0	0x07FF5C  	RCALL	_Can_resetWritePacket
;main.c,92 :: 		Can_addIntToWritePacket(data_buffer[IR1]);
0x09D2	0x8040DA  	MOV	_data_buffer+14, W10
0x09D4	0x07FE65  	RCALL	_Can_addIntToWritePacket
;main.c,93 :: 		Can_addIntToWritePacket(data_buffer[IR2]);
0x09D6	0x8040EA  	MOV	_data_buffer+16, W10
0x09D8	0x07FE63  	RCALL	_Can_addIntToWritePacket
;main.c,94 :: 		Can_addIntToWritePacket(data_buffer[IR3]);
0x09DA	0x8040FA  	MOV	_data_buffer+18, W10
0x09DC	0x07FE61  	RCALL	_Can_addIntToWritePacket
;main.c,95 :: 		Can_write(IR_FR_ID);
0x09DE	0x20655A  	MOV	#1621, W10
0x09E0	0x20000B  	MOV	#0, W11
0x09E2	0x07FE8D  	RCALL	_Can_write
;main.c,97 :: 		break;
0x09E4	0x370023  	BRA	L_TIMER5_INT1
;main.c,99 :: 		case DAU_FL :
L_TIMER5_INT4:
;main.c,101 :: 		Can_resetWritePacket();
0x09E6	0x07FF51  	RCALL	_Can_resetWritePacket
;main.c,102 :: 		Can_addIntToWritePacket(data_buffer[LC_1]);
0x09E8	0x80407A  	MOV	_data_buffer+2, W10
0x09EA	0x07FE5A  	RCALL	_Can_addIntToWritePacket
;main.c,103 :: 		Can_addIntToWritePacket(data_buffer[LC_2]);
0x09EC	0x80408A  	MOV	_data_buffer+4, W10
0x09EE	0x07FE58  	RCALL	_Can_addIntToWritePacket
;main.c,104 :: 		Can_addIntToWritePacket(data_buffer[IN_1]);
0x09F0	0x80409A  	MOV	_data_buffer+6, W10
0x09F2	0x07FE56  	RCALL	_Can_addIntToWritePacket
;main.c,105 :: 		Can_addIntToWritePacket(data_buffer[IN_2]);    //i valori dello sterzo devono essere corretti prima di essere inviati, da implementare
0x09F4	0x8040AA  	MOV	_data_buffer+8, W10
0x09F6	0x07FE54  	RCALL	_Can_addIntToWritePacket
;main.c,106 :: 		Can_write(DAU_FL_ID);
0x09F8	0x20651A  	MOV	#1617, W10
0x09FA	0x20000B  	MOV	#0, W11
0x09FC	0x07FE80  	RCALL	_Can_write
;main.c,108 :: 		Can_resetWritePacket();
0x09FE	0x07FF45  	RCALL	_Can_resetWritePacket
;main.c,109 :: 		Can_addIntToWritePacket(data_buffer[IR1]);
0x0A00	0x8040DA  	MOV	_data_buffer+14, W10
0x0A02	0x07FE4E  	RCALL	_Can_addIntToWritePacket
;main.c,110 :: 		Can_addIntToWritePacket(data_buffer[IR2]);
0x0A04	0x8040EA  	MOV	_data_buffer+16, W10
0x0A06	0x07FE4C  	RCALL	_Can_addIntToWritePacket
;main.c,111 :: 		Can_addIntToWritePacket(data_buffer[IR3]);
0x0A08	0x8040FA  	MOV	_data_buffer+18, W10
0x0A0A	0x07FE4A  	RCALL	_Can_addIntToWritePacket
;main.c,112 :: 		Can_write(IR_FL_ID);
0x0A0C	0x20654A  	MOV	#1620, W10
0x0A0E	0x20000B  	MOV	#0, W11
0x0A10	0x07FE76  	RCALL	_Can_write
;main.c,114 :: 		break;
0x0A12	0x37000C  	BRA	L_TIMER5_INT1
;main.c,116 :: 		}
L_TIMER5_INT0:
0x0A14	0x208320  	MOV	#lo_addr(_DAU_ID), W0
0x0A16	0x784010  	MOV.B	[W0], W0
0x0A18	0xE10462  	CP.B	W0, #2
0x0A1A	0x32FFA7  	BRA Z	L_TIMER5_INT2
L__TIMER5_INT14:
0x0A1C	0x208320  	MOV	#lo_addr(_DAU_ID), W0
0x0A1E	0x784010  	MOV.B	[W0], W0
0x0A20	0xE10461  	CP.B	W0, #1
0x0A22	0x32FFC4  	BRA Z	L_TIMER5_INT3
L__TIMER5_INT15:
0x0A24	0x208320  	MOV	#lo_addr(_DAU_ID), W0
0x0A26	0x784010  	MOV.B	[W0], W0
0x0A28	0xE10460  	CP.B	W0, #0
0x0A2A	0x32FFDD  	BRA Z	L_TIMER5_INT4
L__TIMER5_INT16:
L_TIMER5_INT1:
;main.c,119 :: 		if (TMR5_CONT > 1000){
0x0A2C	0x804041  	MOV	main_TMR5_CONT, W1
0x0A2E	0x203E80  	MOV	#1000, W0
0x0A30	0xE10800  	CP	W1, W0
0x0A32	0x360002  	BRA LEU	L_TIMER5_INT5
L__TIMER5_INT17:
;main.c,120 :: 		TMR5_CONT = 0;
0x0A34	0xEF2000  	CLR	W0
0x0A36	0x884040  	MOV	W0, main_TMR5_CONT
;main.c,121 :: 		}
L_TIMER5_INT5:
;main.c,122 :: 		TMR5_CONT++;
0x0A38	0x200011  	MOV	#1, W1
0x0A3A	0x208080  	MOV	#lo_addr(main_TMR5_CONT), W0
0x0A3C	0x408810  	ADD	W1, [W0], [W0]
;main.c,124 :: 		IFS1bits.T5IF = 0;
0x0A3E	0xA9C086  	BCLR	IFS1bits, #6
;main.c,126 :: 		}
L_end_TIMER5_INT:
0x0A40	0x7805CF  	POP	W11
0x0A42	0x78054F  	POP	W10
0x0A44	0x2001A0  	MOV	#26, W0
0x0A46	0x09000C  	REPEAT	#12
0x0A48	0x78104F  	POP	[W0--]
0x0A4A	0x78004F  	POP	W0
0x0A4C	0xF90036  	POP	RCOUNT
0x0A4E	0xF90034  	POP	PSVPAG
0x0A50	0x064000  	RETFIE
; end of _TIMER5_INT
_Can_addIntToWritePacket:
;can.c,75 :: 		void Can_addIntToWritePacket(int dataOut) {                                      /*questa funzione aggiunge il dato dataOut sul buffer out del can*/
;can.c,76 :: 		Can_addByteToWritePacket((unsigned char) (dataOut >> 8));                    /*in un primo momento faccio le conversioni giuste per evitare errori di tipo*/
0x06A0	0x781F8A  	PUSH	W10
0x06A2	0xDED048  	ASR	W10, #8, W0
0x06A4	0x781F8A  	PUSH	W10
0x06A6	0x784500  	MOV.B	W0, W10
0x06A8	0x07FFB4  	RCALL	_Can_addByteToWritePacket
0x06AA	0x78054F  	POP	W10
;can.c,77 :: 		Can_addByteToWritePacket((unsigned char) (dataOut & 0xFF));                  /**/
0x06AC	0x200FF0  	MOV	#255, W0
0x06AE	0x650000  	AND	W10, W0, W0
0x06B0	0x784500  	MOV.B	W0, W10
0x06B2	0x07FFAF  	RCALL	_Can_addByteToWritePacket
;can.c,78 :: 		}                                                                                 /**/
L_end_Can_addIntToWritePacket:
0x06B4	0x78054F  	POP	W10
0x06B6	0x060000  	RETURN
; end of _Can_addIntToWritePacket
_Can_addByteToWritePacket:
;can.c,80 :: 		void Can_addByteToWritePacket(unsigned char dataOut) {                            /*<----- appoggiandosi a questa funzione che fa la scrittura effettiva*/
;can.c,81 :: 		can_dataOutBuffer[can_dataOutLength] = dataOut;                               /**/
0x0612	0x208331  	MOV	#lo_addr(_can_dataOutBuffer), W1
0x0614	0x208040  	MOV	#lo_addr(_can_dataOutLength), W0
0x0616	0x408010  	ADD	W1, [W0], W0
0x0618	0x78480A  	MOV.B	W10, [W0]
;can.c,82 :: 		can_dataOutLength += 1;
0x061A	0x200011  	MOV	#1, W1
0x061C	0x208040  	MOV	#lo_addr(_can_dataOutLength), W0
0x061E	0x408810  	ADD	W1, [W0], [W0]
;can.c,83 :: 		}
L_end_Can_addByteToWritePacket:
0x0620	0x060000  	RETURN
; end of _Can_addByteToWritePacket
_Can_write:
0x06FE	0xFA0002  	LNK	#2
;can.c,85 :: 		void Can_write(unsigned long int id) {
;can.c,87 :: 		do {
0x0700	0x781F8C  	PUSH	W12
0x0702	0x781F8D  	PUSH	W13
L_Can_write3:
;can.c,88 :: 		sent = CAN1Write(id, can_dataOutBuffer, can_dataOutLength, Can_getWriteFlags());        /*dove cazzo + questa CAN1write??*/
0x0704	0x07FF8E  	RCALL	_Can_getWriteFlags
0x0706	0xBE9F8A  	PUSH.D	W10
0x0708	0x80402D  	MOV	_can_dataOutLength, W13
0x070A	0x20833C  	MOV	#lo_addr(_can_dataOutBuffer), W12
0x070C	0x781F80  	PUSH	W0
0x070E	0x07FF32  	RCALL	_CAN1Write
0x0710	0xB1002F  	SUB	#2, W15
0x0712	0xBE054F  	POP.D	W10
;can.c,89 :: 		i += 1;
0x0714	0x200012  	MOV	#1, W2
0x0716	0x4700E0  	ADD	W14, #0, W1
0x0718	0x410891  	ADD	W2, [W1], [W1]
;can.c,90 :: 		} while ((sent == 0) && (i < CAN_RETRY_LIMIT));
0x071A	0xE10060  	CP	W0, #0
0x071C	0x3A0005  	BRA NZ	L__Can_write14
L__Can_write24:
0x071E	0x200321  	MOV	#50, W1
0x0720	0x470060  	ADD	W14, #0, W0
0x0722	0xE10810  	CP	W1, [W0]
0x0724	0x360001  	BRA LEU	L__Can_write13
L__Can_write25:
0x0726	0x37FFEE  	BRA	L_Can_write3
L__Can_write14:
L__Can_write13:
;can.c,91 :: 		if (i == CAN_RETRY_LIMIT) {
0x0728	0x200321  	MOV	#50, W1
0x072A	0x470060  	ADD	W14, #0, W0
0x072C	0xE10810  	CP	W1, [W0]
0x072E	0x3A0003  	BRA NZ	L_Can_write8
L__Can_write26:
;can.c,92 :: 		can_err++;
0x0730	0x200011  	MOV	#1, W1
0x0732	0x208060  	MOV	#lo_addr(_can_err), W0
0x0734	0x408810  	ADD	W1, [W0], [W0]
;can.c,93 :: 		}
L_Can_write8:
;can.c,94 :: 		}
L_end_Can_write:
0x0736	0x7806CF  	POP	W13
0x0738	0x78064F  	POP	W12
0x073A	0xFA8000  	ULNK
0x073C	0x060000  	RETURN
; end of _Can_write
_CAN1Write:
0x0574	0xFA0000  	LNK	#0
;__Lib_CAN_12.c,596 :: 		
0x0576	0x781F8A  	PUSH	W10
0x0578	0x781F8B  	PUSH	W11
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
0x057A	0x97BA4E  	MOV	[W14-8], W4
;__Lib_CAN_12.c,602 :: 		
0x057C	0xAF636E  	BTSC.B	C1TX0CONbits, #3
0x057E	0x370003  	BRA	L_CAN1Write32
;__Lib_CAN_12.c,603 :: 		
; ptr start address is: 12 (W6)
0x0580	0x203606  	MOV	#lo_addr(C1TX0SID), W6
;__Lib_CAN_12.c,604 :: 		
; TxCtrlReg start address is: 10 (W5)
0x0582	0x2036E5  	MOV	#lo_addr(C1TX0CON), W5
;__Lib_CAN_12.c,605 :: 		
; ptr end address is: 12 (W6)
; TxCtrlReg end address is: 10 (W5)
0x0584	0x37000E  	BRA	L_CAN1Write33
L_CAN1Write32:
;__Lib_CAN_12.c,607 :: 		
0x0586	0xAF635E  	BTSC.B	C1TX1CONbits, #3
0x0588	0x370004  	BRA	L_CAN1Write34
;__Lib_CAN_12.c,608 :: 		
; ptr start address is: 12 (W6)
0x058A	0x203506  	MOV	#lo_addr(C1TX1SID), W6
;__Lib_CAN_12.c,609 :: 		
; TxCtrlReg start address is: 0 (W0)
0x058C	0x2035E0  	MOV	#lo_addr(C1TX1CON), W0
;__Lib_CAN_12.c,610 :: 		
; TxCtrlReg end address is: 0 (W0)
; ptr end address is: 12 (W6)
0x058E	0x780280  	MOV	W0, W5
0x0590	0x370008  	BRA	L_CAN1Write35
L_CAN1Write34:
;__Lib_CAN_12.c,612 :: 		
0x0592	0xAF634E  	BTSC.B	C1TX2CONbits, #3
0x0594	0x370003  	BRA	L_CAN1Write36
;__Lib_CAN_12.c,613 :: 		
; ptr start address is: 12 (W6)
0x0596	0x203406  	MOV	#lo_addr(C1TX2SID), W6
;__Lib_CAN_12.c,614 :: 		
; TxCtrlReg start address is: 0 (W0)
0x0598	0x2034E0  	MOV	#lo_addr(C1TX2CON), W0
;__Lib_CAN_12.c,615 :: 		
0x059A	0x370002  	BRA	L_CAN1Write37
; TxCtrlReg end address is: 0 (W0)
; ptr end address is: 12 (W6)
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
L_CAN1Write36:
;__Lib_CAN_12.c,617 :: 		
0x059C	0xEF2000  	CLR	W0
0x059E	0x370035  	BRA	L_end_CAN1Write
;__Lib_CAN_12.c,618 :: 		
L_CAN1Write37:
;__Lib_CAN_12.c,619 :: 		
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
; ptr start address is: 12 (W6)
; TxCtrlReg start address is: 0 (W0)
; ptr end address is: 12 (W6)
0x05A0	0x780280  	MOV	W0, W5
L_CAN1Write35:
; TxCtrlReg end address is: 0 (W0)
;__Lib_CAN_12.c,620 :: 		
; TxCtrlReg start address is: 10 (W5)
; ptr start address is: 12 (W6)
; ptr end address is: 12 (W6)
; TxCtrlReg end address is: 10 (W5)
L_CAN1Write33:
;__Lib_CAN_12.c,628 :: 		
; ptr start address is: 12 (W6)
; TxCtrlReg start address is: 10 (W5)
0x05A2	0xAF6008  	BTSC	W4, #3
0x05A4	0x37000B  	BRA	L_CAN1Write38
;__Lib_CAN_12.c,629 :: 		
0x05A6	0xBE9F8C  	PUSH.D	W12
0x05A8	0x20002D  	MOV	#2, W13
0x05AA	0x78060B  	MOV	W11, W12
0x05AC	0x78058A  	MOV	W10, W11
0x05AE	0x780506  	MOV	W6, W10
0x05B0	0x200F70  	MOV	#247, W0
0x05B2	0x781F80  	PUSH	W0
0x05B4	0x07FF49  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x05B6	0xB1002F  	SUB	#2, W15
0x05B8	0xBE064F  	POP.D	W12
0x05BA	0x37000A  	BRA	L_CAN1Write39
L_CAN1Write38:
;__Lib_CAN_12.c,631 :: 		
0x05BC	0xBE9F8C  	PUSH.D	W12
0x05BE	0x20002D  	MOV	#2, W13
0x05C0	0x78060B  	MOV	W11, W12
0x05C2	0x78058A  	MOV	W10, W11
0x05C4	0x780506  	MOV	W6, W10
0x05C6	0x200FF0  	MOV	#255, W0
0x05C8	0x781F80  	PUSH	W0
0x05CA	0x07FF3E  	RCALL	__Lib_CAN_12_CAN1IDToRegs
0x05CC	0xB1002F  	SUB	#2, W15
0x05CE	0xBE064F  	POP.D	W12
L_CAN1Write39:
;__Lib_CAN_12.c,633 :: 		
0x05D0	0x430164  	ADD	W6, #4, W2
; ptr end address is: 12 (W6)
; ptr start address is: 6 (W3)
0x05D2	0x780182  	MOV	W2, W3
;__Lib_CAN_12.c,635 :: 		
0x05D4	0x780092  	MOV	[W2], W1
0x05D6	0x2FD800  	MOV	#64896, W0
0x05D8	0x608900  	AND	W1, W0, [W2]
;__Lib_CAN_12.c,636 :: 		
0x05DA	0x66806F  	AND	W13, #15, W0
0x05DC	0xDD0043  	SL	W0, #3, W0
0x05DE	0x700993  	IOR	W0, [W3], [W3]
;__Lib_CAN_12.c,638 :: 		
0x05E0	0xAFC008  	BTSC	W4, #6
0x05E2	0x370003  	BRA	L_CAN1Write40
;__Lib_CAN_12.c,639 :: 		
0x05E4	0x780093  	MOV	[W3], W1
0x05E6	0x202000  	MOV	#512, W0
0x05E8	0x708980  	IOR	W1, W0, [W3]
L_CAN1Write40:
;__Lib_CAN_12.c,642 :: 		
; chptr start address is: 4 (W2)
0x05EA	0x418162  	ADD	W3, #2, W2
; ptr end address is: 6 (W3)
;__Lib_CAN_12.c,643 :: 		
; i start address is: 0 (W0)
0x05EC	0xEF2000  	CLR	W0
;__Lib_CAN_12.c,644 :: 		
; TxCtrlReg end address is: 10 (W5)
; i end address is: 0 (W0)
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
0x05EE	0x780185  	MOV	W5, W3
0x05F0	0x780280  	MOV	W0, W5
;__Lib_CAN_12.c,645 :: 		
L_CAN1Write41:
; chptr start address is: 4 (W2)
; chptr end address is: 4 (W2)
; i start address is: 10 (W5)
; TxCtrlReg start address is: 6 (W3)
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
0x05F2	0xE1280D  	CP	W5, W13
0x05F4	0x310005  	BRA GEU	L_CAN1Write42
L__CAN1Write147:
; chptr end address is: 4 (W2)
;__Lib_CAN_12.c,646 :: 		
; chptr start address is: 4 (W2)
0x05F6	0x410085  	ADD	W2, W5, W1
0x05F8	0x460005  	ADD	W12, W5, W0
0x05FA	0x784890  	MOV.B	[W0], [W1]
;__Lib_CAN_12.c,647 :: 		
0x05FC	0xEC200A  	INC	W5
;__Lib_CAN_12.c,648 :: 		
; chptr end address is: 4 (W2)
; i end address is: 10 (W5)
0x05FE	0x37FFF9  	BRA	L_CAN1Write41
L_CAN1Write42:
;__Lib_CAN_12.c,650 :: 		
0x0600	0x6209E3  	AND	W4, #3, [W3]
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
;__Lib_CAN_12.c,661 :: 		
0x0602	0x780013  	MOV	[W3], W0
0x0604	0x700068  	IOR	W0, #8, W0
0x0606	0x780980  	MOV	W0, [W3]
; TxCtrlReg end address is: 6 (W3)
;__Lib_CAN_12.c,668 :: 		
0x0608	0x2FFFF0  	MOV	#65535, W0
;__Lib_CAN_12.c,669 :: 		
;__Lib_CAN_12.c,668 :: 		
;__Lib_CAN_12.c,669 :: 		
L_end_CAN1Write:
0x060A	0x7805CF  	POP	W11
0x060C	0x78054F  	POP	W10
0x060E	0xFA8000  	ULNK
0x0610	0x060000  	RETURN
; end of _CAN1Write
_Can_getWriteFlags:
;can.c,107 :: 		unsigned int Can_getWriteFlags(void) {
;can.c,108 :: 		return CAN_DEFAULT_FLAGS & can_txPriority;
0x0622	0x200FF1  	MOV	#255, W1
0x0624	0x208020  	MOV	#lo_addr(_can_txPriority), W0
0x0626	0x608010  	AND	W1, [W0], W0
;can.c,109 :: 		}
L_end_Can_getWriteFlags:
0x0628	0x060000  	RETURN
; end of _Can_getWriteFlags
_TIMER4_INT:
0x08B0	0xF80034  	PUSH	PSVPAG
0x08B2	0xF80036  	PUSH	RCOUNT
0x08B4	0x781F80  	PUSH	W0
0x08B6	0x200020  	MOV	#2, W0
0x08B8	0x09000C  	REPEAT	#12
0x08BA	0x781FB0  	PUSH	[W0++]
;main.c,155 :: 		void TIMER4_INT() iv IVT_ADDR_T4INTERRUPT ics ICS_AUTO {
;main.c,157 :: 		ADCON1bits.ADON = 1;
0x08BC	0xA8E2A1  	BSET	ADCON1bits, #15
;main.c,158 :: 		IFS1bits.T4IF = 0;
0x08BE	0xA9A086  	BCLR	IFS1bits, #5
;main.c,160 :: 		}
L_end_TIMER4_INT:
0x08C0	0x2001A0  	MOV	#26, W0
0x08C2	0x09000C  	REPEAT	#12
0x08C4	0x78104F  	POP	[W0--]
0x08C6	0x78004F  	POP	W0
0x08C8	0xF90036  	POP	RCOUNT
0x08CA	0xF90034  	POP	PSVPAG
0x08CC	0x064000  	RETFIE
; end of _TIMER4_INT
_ADC_INT:
0x08CE	0xF80034  	PUSH	PSVPAG
0x08D0	0xF80036  	PUSH	RCOUNT
0x08D2	0x781F80  	PUSH	W0
0x08D4	0x200020  	MOV	#2, W0
0x08D6	0x09000C  	REPEAT	#12
0x08D8	0x781FB0  	PUSH	[W0++]
;main.c,128 :: 		void ADC_INT() iv IVT_ADDR_ADCINTERRUPT ics ICS_AUTO {  //non vorrei che le operazioni svolte qui dentro fosero troppe per una interrupt, forse andrebbero delegate a un'altra funzione
;main.c,130 :: 		for (Channel_Index = 0; Channel_Index < N_CHANNEL; Channel_Index ++){
0x08DA	0xEF2000  	CLR	W0
0x08DC	0x884000  	MOV	W0, main_Channel_Index
L_ADC_INT6:
0x08DE	0x804000  	MOV	main_Channel_Index, W0
0x08E0	0xE10070  	CP	W0, #16
0x08E2	0x310025  	BRA GEU	L_ADC_INT7
L__ADC_INT19:
;main.c,131 :: 		buffer_adc = &ADCBUF0;
0x08E4	0x202800  	MOV	#lo_addr(ADCBUF0), W0
0x08E6	0x884180  	MOV	W0, _buffer_adc
;main.c,133 :: 		input[Channel_Index][inext] = *buffer_adc + Channel_Index;          // Fetch sample
0x08E8	0x804000  	MOV	main_Channel_Index, W0
0x08EA	0xDD00C6  	SL	W0, #6, W1
0x08EC	0x218000  	MOV	#lo_addr(_input), W0
0x08EE	0x400081  	ADD	W0, W1, W1
0x08F0	0x804050  	MOV	main_inext, W0
0x08F2	0xDD0041  	SL	W0, #1, W0
0x08F4	0x408100  	ADD	W1, W0, W2
0x08F6	0x804180  	MOV	_buffer_adc, W0
0x08F8	0x780090  	MOV	[W0], W1
0x08FA	0x208000  	MOV	#lo_addr(main_Channel_Index), W0
0x08FC	0x408910  	ADD	W1, [W0], [W2]
;main.c,138 :: 		input[Channel_Index],                   // Input buffer
0x08FE	0x804000  	MOV	main_Channel_Index, W0
0x0900	0xDD00C6  	SL	W0, #6, W1
0x0902	0x218000  	MOV	#lo_addr(_input), W0
0x0904	0x400001  	ADD	W0, W1, W0
;main.c,139 :: 		inext);                                              // sample corrente
0x0906	0xF8080A  	PUSH	main_inext
;main.c,138 :: 		input[Channel_Index],                   // Input buffer
0x0908	0x781F80  	PUSH	W0
;main.c,137 :: 		BUFFER_SIZE,                                       // lunghezza del buffer
0x090A	0x200200  	MOV	#32, W0
0x090C	0x781F80  	PUSH	W0
;main.c,136 :: 		COEFF_B,                                            // coefficenti del filtro
0x090E	0x280000  	MOV	#lo_addr(_COEFF_B), W0
0x0910	0x781F80  	PUSH	W0
;main.c,135 :: 		CurrentValue = FIR_Radix(FILTER_ORDER+1,                                      // ordine del filtro
0x0912	0x2000B0  	MOV	#11, W0
0x0914	0x781F80  	PUSH	W0
;main.c,139 :: 		inext);                                              // sample corrente
0x0916	0x07FED0  	RCALL	_FIR_Radix
0x0918	0xB100AF  	SUB	#10, W15
0x091A	0x884170  	MOV	W0, main_CurrentValue
;main.c,141 :: 		data_buffer[Channel_Index] = CurrentValue;                        //salvo i dati filtrati nel buffer
0x091C	0x804001  	MOV	main_Channel_Index, W1
0x091E	0xDD0941  	SL	W1, #1, W2
0x0920	0x2080C1  	MOV	#lo_addr(_data_buffer), W1
0x0922	0x408082  	ADD	W1, W2, W1
0x0924	0x780880  	MOV	W0, [W1]
;main.c,130 :: 		for (Channel_Index = 0; Channel_Index < N_CHANNEL; Channel_Index ++){
0x0926	0x200011  	MOV	#1, W1
0x0928	0x208000  	MOV	#lo_addr(main_Channel_Index), W0
0x092A	0x408810  	ADD	W1, [W0], [W0]
;main.c,142 :: 		}
0x092C	0x37FFD8  	BRA	L_ADC_INT6
L_ADC_INT7:
;main.c,144 :: 		inext = (inext+1) & (BUFFER_SIZE-1);                               // inext = (inext + 1) mod BUFFFER_SIZE;
0x092E	0x804050  	MOV	main_inext, W0
0x0930	0x4000E1  	ADD	W0, #1, W1
0x0932	0x2080A0  	MOV	#lo_addr(main_inext), W0
0x0934	0x60887F  	AND	W1, #31, [W0]
;main.c,145 :: 		IFS0bits.ADIF     = 0b0;                                                //clear interrupt flag
0x0936	0xA96085  	BCLR	IFS0bits, #11
;main.c,148 :: 		if (ADC_CONT > 1000){
0x0938	0x804161  	MOV	main_ADC_CONT, W1
0x093A	0x203E80  	MOV	#1000, W0
0x093C	0xE10800  	CP	W1, W0
0x093E	0x360002  	BRA LEU	L_ADC_INT9
L__ADC_INT20:
;main.c,149 :: 		ADC_CONT = 0;
0x0940	0xEF2000  	CLR	W0
0x0942	0x884160  	MOV	W0, main_ADC_CONT
;main.c,150 :: 		}
L_ADC_INT9:
;main.c,151 :: 		ADC_CONT++;
0x0944	0x200011  	MOV	#1, W1
0x0946	0x2082C0  	MOV	#lo_addr(main_ADC_CONT), W0
0x0948	0x408810  	ADD	W1, [W0], [W0]
;main.c,153 :: 		}
L_end_ADC_INT:
0x094A	0x2001A0  	MOV	#26, W0
0x094C	0x09000C  	REPEAT	#12
0x094E	0x78104F  	POP	[W0--]
0x0950	0x78004F  	POP	W0
0x0952	0xF90036  	POP	RCOUNT
0x0954	0xF90034  	POP	PSVPAG
0x0956	0x064000  	RETFIE
; end of _ADC_INT
_FIR_Radix:
0x06B8	0xFA0002  	LNK	#2
;__Lib_FirRadix.c,24 :: 		
;__Lib_FirRadix.c,30 :: 		
0x06BA	0xF80044  	PUSH	CORCON
;__Lib_FirRadix.c,31 :: 		
0x06BC	0xF80046  	PUSH	MODCON
;__Lib_FirRadix.c,40 :: 		
0x06BE	0x97B82E  	MOV	[W14-12], W0
0x06C0	0xDD00C1  	SL	W0, #1, W1
0x06C2	0x57006E  	SUB	W14, #14, W0
0x06C4	0x408090  	ADD	W1, [W0], W1
0x06C6	0x2004E0  	MOV	#lo_addr(YMODEND), W0
0x06C8	0x508861  	SUB	W1, #1, [W0]
;__Lib_FirRadix.c,41 :: 		
0x06CA	0x97B81E  	MOV	[W14-14], W0
0x06CC	0xB7A04C  	MOV	WREG, YMODSRT
;__Lib_FirRadix.c,42 :: 		
0x06CE	0x97B80E  	MOV	[W14-16], W0
0x06D0	0xDD00C1  	SL	W0, #1, W1
0x06D2	0x57006E  	SUB	W14, #14, W0
0x06D4	0x408510  	ADD	W1, [W0], W10
;__Lib_FirRadix.c,43 :: 		
0x06D6	0x97BACE  	MOV	[W14-8], W5
;__Lib_FirRadix.c,44 :: 		
0x06D8	0x97BC3E  	MOV	[W14-10], W8
;__Lib_FirRadix.c,45 :: 		
0x06DA	0x470060  	ADD	W14, #0, W0
0x06DC	0x780580  	MOV	W0, W11
;__Lib_FirRadix.c,48 :: 		
0x06DE	0x200F40  	MOV	#244, W0
0x06E0	0xB7A044  	MOV	WREG, CORCON
;__Lib_FirRadix.c,51 :: 		
0x06E2	0x240A00  	MOV	#16544, W0
0x06E4	0xB7A046  	MOV	WREG, MODCON
;__Lib_FirRadix.c,52 :: 		
0x06E6	0x000000  	NOP
;__Lib_FirRadix.c,70 :: 		
0x06E8	0x200004  	MOV	#0, W4
;__Lib_FirRadix.c,71 :: 		
0x06EA	0x200006  	MOV	#0, W6
;__Lib_FirRadix.c,74 :: 		
0x06EC	0xC30112  	CLR	A
;__Lib_FirRadix.c,75 :: 		
0x06EE	0x098005  	REPEAT	W5
;__Lib_FirRadix.c,76 :: 		
0x06F0	0xC1085E  	MAC	W4*W6, A, [W8]+=2, W4, [W10]-=2, W6
;__Lib_FirRadix.c,79 :: 		
0x06F2	0xCD001B  	SAC.R	A, #0, [W11]
;__Lib_FirRadix.c,82 :: 		
0x06F4	0xF90046  	POP	MODCON
;__Lib_FirRadix.c,83 :: 		
0x06F6	0xF90044  	POP	CORCON
;__Lib_FirRadix.c,87 :: 		
0x06F8	0x90000E  	MOV	[W14+0], W0
;__Lib_FirRadix.c,90 :: 		
L_end_FIR_Radix:
0x06FA	0xFA8000  	ULNK
0x06FC	0x060000  	RETURN
; end of _FIR_Radix
;main.c,40 :: _COEFF_B [22]
0x8000	0x0000 ;_COEFF_B+0
0x8002	0x0000 ;_COEFF_B+2
0x8004	0x0000 ;_COEFF_B+4
0x8006	0x0000 ;_COEFF_B+6
0x8008	0x0000 ;_COEFF_B+8
0x800A	0x6666 ;_COEFF_B+10
0x800C	0x0000 ;_COEFF_B+12
0x800E	0x0000 ;_COEFF_B+14
0x8010	0x0000 ;_COEFF_B+16
0x8012	0x0000 ;_COEFF_B+18
0x8014	0x0000 ;_COEFF_B+20
; end of _COEFF_B
;main.c,0 :: ?ICSmain_Channel_Index [2]
0x8016	0x0000 ;?ICSmain_Channel_Index+0
; end of ?ICSmain_Channel_Index
;can.c,0 :: ?ICS_can_txPriority [2]
0x8018	0x00FD ;?ICS_can_txPriority+0
; end of ?ICS_can_txPriority
;can.c,0 :: ?ICS_can_dataOutLength [2]
0x801A	0x0000 ;?ICS_can_dataOutLength+0
; end of ?ICS_can_dataOutLength
;can.c,0 :: ?ICS_can_err [2]
0x801C	0x0000 ;?ICS_can_err+0
; end of ?ICS_can_err
;main.c,0 :: ?ICSmain_TMR5_CONT [2]
0x801E	0x0000 ;?ICSmain_TMR5_CONT+0
; end of ?ICSmain_TMR5_CONT
;main.c,0 :: ?ICSmain_inext [2]
0x8020	0x0000 ;?ICSmain_inext+0
; end of ?ICSmain_inext
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100     [154]    _CAN1SetBaudRate
0x019A      [40]    _CAN1SetMask
0x01C2     [110]    _CAN1SetFilter
0x0230      [78]    _CAN1SetOperationMode
0x027E     [224]    _CAN1Initialize
0x035E       [4]    _Can_setWritePriority
0x0362     [230]    _Can_initInterrupt
0x0448     [300]    __Lib_CAN_12_CAN1IDToRegs
0x0574     [158]    _CAN1Write
0x0612      [16]    _Can_addByteToWritePacket
0x0622       [8]    _Can_getWriteFlags
0x062A     [106]    _Can_init
0x0694       [4]    _Can_clearInterrupt
0x0698       [8]    _io_init
0x06A0      [24]    _Can_addIntToWritePacket
0x06B8      [70]    _FIR_Radix
0x06FE      [64]    _Can_write
0x073E      [58]    _tmr5_init
0x0778      [52]    _dau_set_ID
0x07AC      [36]    _Clear_buffer
0x07D0     [126]    _adc_init
0x084E       [6]    _can_bus_init
0x0854      [54]    _tmr4_init
0x088A      [34]    _Can_resetWritePacket
0x08AC       [4]    _set_LEDGREEN
0x08B0      [30]    _TIMER4_INT
0x08CE     [138]    _ADC_INT
0x0958     [250]    _TIMER5_INT
0x0A52      [46]    _main
0x0A80      [28]    _canInterrupt
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x080C      [32]    _data_buffer
0x0338       [2]    C1RXM1SID
0x036E       [2]    C1TX0CON
0x0360       [2]    C1TX0SID
0x036E       [1]    C1TX0CONbits
0x0330       [2]    C1RXM0SID
0x0328       [2]    C1RXF5SID
0x0320       [2]    C1RXF4SID
0x0318       [2]    C1RXF3SID
0x0390       [2]    C1CTRLbits
0x0394       [2]    C1CFG2bits
0x0392       [1]    C1CFG1bits
0x038E       [1]    C1RX0CONbits
0x035E       [1]    C1TX1CONbits
0x082C       [2]    main_ADC_CONT
0x082E       [2]    main_CurrentValue
0x0044       [2]    CORCON
0x004C       [2]    YMODSRT
0x004E       [2]    YMODEND
0x0046       [2]    MODCON
0x0280       [2]    ADCBUF0
0x034E       [1]    C1TX2CONbits
0x035E       [2]    C1TX1CON
0x0350       [2]    C1TX1SID
0x0340       [2]    C1TX2SID
0x0830       [2]    _buffer_adc
0x034E       [2]    C1TX2CON
0x0310       [2]    C1RXF2SID
0x0120       [2]    T5CONbits
0x02E4       [2]    TRISGbits
0x0832       [1]    _DAU_ID
0x009E       [2]    IPC5bits
0x011C       [2]    PR5
0x0118       [2]    TMR5
0x0086       [2]    IFS1bits
0x1800    [1024]    _input
0x0833       [8]    _can_dataOutBuffer
0x0042       [2]    SRbits
0x0398       [1]    C1INTEbits
0x008E       [2]    IEC1bits
0x0052       [2]    DISICNT
0x02E0       [1]    PORTFbits
0x02A0       [2]    ADCON1bits
0x02A2       [2]    ADCON2bits
0x02A4       [2]    ADCON3bits
0x02AA       [2]    ADCSSL
0x0308       [2]    C1RXF1SID
0x0300       [2]    C1RXF0SID
0x02A6       [2]    ADCHSbits
0x02A8       [2]    ADPCFG
0x0114       [2]    TMR4
0x011E       [2]    T4CONbits
0x02E8       [2]    LATGbits
0x011A       [2]    PR4
0x0084       [2]    IFS0bits
0x0098       [2]    IPC2bits
0x008C       [2]    IEC0bits
0x0800       [2]    main_Channel_Index
0x0802       [2]    _can_txPriority
0x0804       [2]    _can_dataOutLength
0x0806       [2]    _can_err
0x0808       [2]    main_TMR5_CONT
0x080A       [2]    main_inext
0x0044       [2]    CORCON
0x0046       [2]    MODCON
0x004C       [2]    YMODSRT
0x004E       [2]    YMODEND
0x0052       [2]    DISICNT
0x0014       [2]    FARG_CAN1SetBaudRate_SJW
0x0016       [2]    FARG_CAN1SetBaudRate_BRP
0x0018       [2]    FARG_CAN1SetBaudRate_PHSEG1
0x001A       [2]    FARG_CAN1SetBaudRate_PHSEG2
0x0114       [2]    TMR4
0x0118       [2]    TMR5
0x011A       [2]    PR4
0x011C       [2]    PR5
0x0014       [2]    FARG_CAN1SetMask_CAN_MASK
0x0016       [4]    FARG_CAN1SetMask_val
0x001A       [2]    FARG_CAN1SetMask_CAN_CONFIG_FLAGS
0x0014       [2]    FARG_CAN1SetFilter_CAN_FILTER
0x0016       [4]    FARG_CAN1SetFilter_val
0x001A       [2]    FARG_CAN1SetFilter_CAN_CONFIG_FLAGS
0x0014       [2]    FARG_CAN1SetOperationMode_mode
0x0016       [2]    FARG_CAN1SetOperationMode_WAIT
0x0014       [2]    FARG_CAN1Initialize_SJW
0x0016       [2]    FARG_CAN1Initialize_BRP
0x0018       [2]    FARG_CAN1Initialize_PHSEG1
0x001A       [2]    FARG_CAN1Initialize_PHSEG2
0x0280       [2]    ADCBUF0
0x02A8       [2]    ADPCFG
0x02AA       [2]    ADCSSL
0x0300       [2]    C1RXF0SID
0x0308       [2]    C1RXF1SID
0x0310       [2]    C1RXF2SID
0x0318       [2]    C1RXF3SID
0x0320       [2]    C1RXF4SID
0x0328       [2]    C1RXF5SID
0x0330       [2]    C1RXM0SID
0x0338       [2]    C1RXM1SID
0x0340       [2]    C1TX2SID
0x034E       [2]    C1TX2CON
0x0350       [2]    C1TX1SID
0x0014       [2]    FARG_Can_setWritePriority_txPriority
0x035E       [2]    C1TX1CON
0x0360       [2]    C1TX0SID
0x036E       [2]    C1TX0CON
0x0014       [2]    FARG___Lib_CAN_12_CAN1IDToRegs_ptr
0x0016       [4]    FARG___Lib_CAN_12_CAN1IDToRegs_val
0x001A       [2]    FARG___Lib_CAN_12_CAN1IDToRegs_RegType
0x0014       [4]    FARG_CAN1Write_id
0x0018       [2]    FARG_CAN1Write_Data_
0x001A       [2]    FARG_CAN1Write_DataLen
0x0014       [1]    FARG_Can_addByteToWritePacket_dataOut
0x0014       [2]    FARG_Can_addIntToWritePacket_dataOut
0x0014       [4]    FARG_Can_write_id
0x0014       [2]    FARG_dau_set_ID_DAU_ID
0x0014       [2]    FARG_Clear_buffer_input
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [22]    _COEFF_B
0x8016       [2]    ?ICSmain_Channel_Index
0x8018       [2]    ?ICS_can_txPriority
0x801A       [2]    ?ICS_can_dataOutLength
0x801C       [2]    ?ICS_can_err
0x801E       [2]    ?ICSmain_TMR5_CONT
0x8020       [2]    ?ICSmain_inext
//** Label List: ** 
//----------------------------------------------
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L__Can_write12
  L__Can_write13
  L__Can_write14
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read17
  L__Can_read18
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write24
  L__Can_write25
  L__Can_write26
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket29
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived32
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived34
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_TIMER5_INT0
  L_TIMER5_INT1
  L_TIMER5_INT2
  L_TIMER5_INT3
  L_TIMER5_INT4
  L_TIMER5_INT5
  L_ADC_INT6
  L_ADC_INT7
  L_ADC_INT8
  L_ADC_INT9
  L_main10
  L_main11
  L_end_canInterrupt
  _canInterrupt
  L_end_TIMER5_INT
  _TIMER5_INT
  L__TIMER5_INT14
  L__TIMER5_INT15
  L__TIMER5_INT16
  L__TIMER5_INT17
  L_end_ADC_INT
  _ADC_INT
  L__ADC_INT19
  L__ADC_INT20
  L_end_TIMER4_INT
  _TIMER4_INT
  L_end_main
  _main
  L__main_end_loop
  L_Clear_buffer0
  L_Clear_buffer1
  L_Clear_buffer2
  L_Clear_buffer3
  L_Clear_buffer4
  L_Clear_buffer5
  L_dau_set_ID6
  L_dau_set_ID7
  L_dau_set_ID8
  L_dau_set_ID9
  L_dau_set_ID10
  L_dau_set_ID11
  L_dau_set_ID12
  L_dau_set_ID13
  L_dau_set_ID14
  L_dau_set_ID15
  L_dau_set_ID16
  L_dau_set_ID17
  L_Toggle_LEDRED18
  L_Toggle_LEDRED19
  L_Toggle_LEDBLUE20
  L_Toggle_LEDBLUE21
  L__dau_set_ID22
  L__dau_set_ID23
  L__dau_set_ID24
  L__dau_set_ID25
  L__dau_set_ID26
  L__dau_set_ID27
  L__dau_set_ID28
  L__dau_set_ID29
  L__dau_set_ID30
  L_end_Clear_buffer
  _Clear_buffer
  L__Clear_buffer32
  L__Clear_buffer33
  L_end_tmr5_init
  _tmr5_init
  L_end_can_bus_init
  _can_bus_init
  L_end_adc_init
  _adc_init
  L_end_tmr4_init
  _tmr4_init
  L_end_io_init
  _io_init
  L_end_dau_set_ID
  _dau_set_ID
  L_end_Toggle_LEDRED
  _Toggle_LEDRED
  L_end_Toggle_LEDBLUE
  _Toggle_LEDBLUE
  L_end_Set_LEDRED
  _Set_LEDRED
  L_end_set_LEDBLUE
  _set_LEDBLUE
  L_end_set_LEDGREEN
  _set_LEDGREEN
  L___Lib_CAN_12_CAN1IDToRegs0
  L___Lib_CAN_12_CAN1IDToRegs1
  L___Lib_CAN_12_CAN1IDToRegs2
  L___Lib_CAN_12_CAN1IDToRegs3
  L___Lib_CAN_12_CAN1IDToRegs4
  L___Lib_CAN_12_CAN1IDToRegs5
  L___Lib_CAN_12_CAN1IDToRegs6
  L___Lib_CAN_12_CAN1IDToRegs7
  L___Lib_CAN_12_CAN1IDToRegs8
  L___Lib_CAN_12_CAN1IDToRegs9
  L___Lib_CAN_12_CAN1IDToRegs10
  L___Lib_CAN_12_CAN1IDToRegs11
  L___Lib_CAN_12_CAN1IDToRegs12
  L_CAN1SetOperationMode13
  L_CAN1SetOperationMode14
  L_CAN1SetOperationMode15
  L_CAN1SetOperationMode16
  L_CAN1SetBaudRate17
  L_CAN1SetBaudRate18
  L_CAN1SetBaudRate19
  L_CAN1SetMask20
  L_CAN1SetMask21
  L_CAN1SetFilter22
  L_CAN1SetFilter23
  L_CAN1SetFilter24
  L_CAN1SetFilter25
  L_CAN1SetFilter26
  L_CAN1SetFilter27
  L_CAN1SetFilter28
  L_CAN1SetFilter29
  L___Lib_CAN_12_RegsToCAN1ID30
  L___Lib_CAN_12_RegsToCAN1ID31
  L_CAN1Write32
  L_CAN1Write33
  L_CAN1Write34
  L_CAN1Write35
  L_CAN1Write36
  L_CAN1Write37
  L_CAN1Write38
  L_CAN1Write39
  L_CAN1Write40
  L_CAN1Write41
  L_CAN1Write42
  L_CAN1Read43
  L_CAN1Read44
  L_CAN1Read45
  L_CAN1Read46
  L_CAN1Read47
  L_CAN1Read48
  L_CAN1Read49
  L_CAN1Read50
  L_CAN1Read51
  L_CAN1Read52
  L_CAN1Read53
  L_CAN1Read54
  L_CAN1Read55
  L_CAN1Read56
  L_CAN1Read57
  L_CAN1Read58
  L_CAN1Initialize59
  L_CAN1Initialize60
  L_CAN1Initialize61
  L_CAN1Initialize62
  L_CAN1Initialize63
  L___Lib_CAN_12_CAN2IDToRegs64
  L___Lib_CAN_12_CAN2IDToRegs65
  L___Lib_CAN_12_CAN2IDToRegs66
  L___Lib_CAN_12_CAN2IDToRegs67
  L___Lib_CAN_12_CAN2IDToRegs68
  L___Lib_CAN_12_CAN2IDToRegs69
  L___Lib_CAN_12_CAN2IDToRegs70
  L___Lib_CAN_12_CAN2IDToRegs71
  L___Lib_CAN_12_CAN2IDToRegs72
  L___Lib_CAN_12_CAN2IDToRegs73
  L___Lib_CAN_12_CAN2IDToRegs74
  L___Lib_CAN_12_CAN2IDToRegs75
  L___Lib_CAN_12_CAN2IDToRegs76
  L_CAN2SetOperationMode77
  L_CAN2SetOperationMode78
  L_CAN2SetOperationMode79
  L_CAN2SetOperationMode80
  L_CAN2SetBaudRate81
  L_CAN2SetBaudRate82
  L_CAN2SetBaudRate83
  L_CAN2SetMask84
  L_CAN2SetMask85
  L_CAN2SetFilter86
  L_CAN2SetFilter87
  L_CAN2SetFilter88
  L_CAN2SetFilter89
  L_CAN2SetFilter90
  L_CAN2SetFilter91
  L_CAN2SetFilter92
  L_CAN2SetFilter93
  L___Lib_CAN_12_RegsToCAN2ID94
  L___Lib_CAN_12_RegsToCAN2ID95
  L_CAN2Write96
  L_CAN2Write97
  L_CAN2Write98
  L_CAN2Write99
  L_CAN2Write100
  L_CAN2Write101
  L_CAN2Write102
  L_CAN2Write103
  L_CAN2Write104
  L_CAN2Write105
  L_CAN2Write106
  L_CAN2Read107
  L_CAN2Read108
  L_CAN2Read109
  L_CAN2Read110
  L_CAN2Read111
  L_CAN2Read112
  L_CAN2Read113
  L_CAN2Read114
  L_CAN2Read115
  L_CAN2Read116
  L_CAN2Read117
  L_CAN2Read118
  L_CAN2Read119
  L_CAN2Read120
  L_CAN2Read121
  L_CAN2Read122
  L_CAN2Initialize123
  L_CAN2Initialize124
  L_CAN2Initialize125
  L_CAN2Initialize126
  L_CAN2Initialize127
  L_end_CAN1IDToRegs
  __Lib_CAN_12_CAN1IDToRegs
  L___Lib_CAN_12_CAN1IDToRegs129
  L___Lib_CAN_12_CAN1IDToRegs130
  L___Lib_CAN_12_CAN1IDToRegs131
  L_end_CAN1SetOperationMode
  _CAN1SetOperationMode
  L__CAN1SetOperationMode133
  L__CAN1SetOperationMode134
  L_end_CAN1GetOperationMode
  _CAN1GetOperationMode
  L_end_CAN1SetBaudRate
  _CAN1SetBaudRate
  L_end_CAN1SetMask
  _CAN1SetMask
  L__CAN1SetMask138
  L_end_CAN1SetFilter
  _CAN1SetFilter
  L__CAN1SetFilter140
  L__CAN1SetFilter141
  L__CAN1SetFilter142
  L__CAN1SetFilter143
  L__CAN1SetFilter144
  L_end_RegsToCAN1ID
  __Lib_CAN_12_RegsToCAN1ID
  L_end_CAN1Write
  _CAN1Write
  L__CAN1Write147
  L_end_CAN1Read
  _CAN1Read
  L__CAN1Read149
  L__CAN1Read150
  L__CAN1Read151
  L_end_CAN1Initialize
  _CAN1Initialize
  L__CAN1Initialize153
  L_end_CAN2IDToRegs
  __Lib_CAN_12_CAN2IDToRegs
  L___Lib_CAN_12_CAN2IDToRegs155
  L___Lib_CAN_12_CAN2IDToRegs156
  L___Lib_CAN_12_CAN2IDToRegs157
  L_end_CAN2SetOperationMode
  _CAN2SetOperationMode
  L__CAN2SetOperationMode159
  L__CAN2SetOperationMode160
  L_end_CAN2GetOperationMode
  _CAN2GetOperationMode
  L_end_CAN2SetBaudRate
  _CAN2SetBaudRate
  L_end_CAN2SetMask
  _CAN2SetMask
  L__CAN2SetMask164
  L_end_CAN2SetFilter
  _CAN2SetFilter
  L__CAN2SetFilter166
  L__CAN2SetFilter167
  L__CAN2SetFilter168
  L__CAN2SetFilter169
  L__CAN2SetFilter170
  L_end_RegsToCAN2ID
  __Lib_CAN_12_RegsToCAN2ID
  L_end_CAN2Write
  _CAN2Write
  L__CAN2Write173
  L_end_CAN2Read
  _CAN2Read
  L__CAN2Read175
  L__CAN2Read176
  L__CAN2Read177
  L_end_CAN2Initialize
  _CAN2Initialize
  L__CAN2Initialize179
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L__Can_write12
  L__Can_write13
  L__Can_write14
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read17
  L__Can_read18
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write24
  L__Can_write25
  L__Can_write26
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket29
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived32
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived34
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_TIMER5_INT0
  L_TIMER5_INT1
  L_TIMER5_INT2
  L_TIMER5_INT3
  L_TIMER5_INT4
  L_TIMER5_INT5
  L_ADC_INT6
  L_ADC_INT7
  L_ADC_INT8
  L_ADC_INT9
  L_main10
  L_main11
  L_end_canInterrupt
  _canInterrupt
  L_end_TIMER5_INT
  _TIMER5_INT
  L__TIMER5_INT14
  L__TIMER5_INT15
  L__TIMER5_INT16
  L__TIMER5_INT17
  L_end_ADC_INT
  _ADC_INT
  L__ADC_INT19
  L__ADC_INT20
  L_end_TIMER4_INT
  _TIMER4_INT
  L_end_main
  _main
  L__main_end_loop
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L__Can_write12
  L__Can_write13
  L__Can_write14
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read17
  L__Can_read18
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write24
  L__Can_write25
  L__Can_write26
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket29
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived32
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived34
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_TIMER5_INT0
  L_TIMER5_INT1
  L_TIMER5_INT2
  L_TIMER5_INT3
  L_TIMER5_INT4
  L_TIMER5_INT5
  L_ADC_INT6
  L_ADC_INT7
  L_ADC_INT8
  L_ADC_INT9
  L_main10
  L_main11
  L_end_canInterrupt
  _canInterrupt
  L_end_TIMER5_INT
  _TIMER5_INT
  L__TIMER5_INT14
  L__TIMER5_INT15
  L__TIMER5_INT16
  L__TIMER5_INT17
  L_end_ADC_INT
  _ADC_INT
  L__ADC_INT19
  L__ADC_INT20
  L_end_TIMER4_INT
  _TIMER4_INT
  L_end_main
  _main
  L__main_end_loop
  L___Lib_CAN_12_CAN1IDToRegs0
  L___Lib_CAN_12_CAN1IDToRegs1
  L___Lib_CAN_12_CAN1IDToRegs2
  L___Lib_CAN_12_CAN1IDToRegs3
  L___Lib_CAN_12_CAN1IDToRegs4
  L___Lib_CAN_12_CAN1IDToRegs5
  L___Lib_CAN_12_CAN1IDToRegs6
  L___Lib_CAN_12_CAN1IDToRegs7
  L___Lib_CAN_12_CAN1IDToRegs8
  L___Lib_CAN_12_CAN1IDToRegs9
  L___Lib_CAN_12_CAN1IDToRegs10
  L___Lib_CAN_12_CAN1IDToRegs11
  L___Lib_CAN_12_CAN1IDToRegs12
  L_CAN1SetOperationMode13
  L_CAN1SetOperationMode14
  L_CAN1SetOperationMode15
  L_CAN1SetOperationMode16
  L_CAN1SetBaudRate17
  L_CAN1SetBaudRate18
  L_CAN1SetBaudRate19
  L_CAN1SetMask20
  L_CAN1SetMask21
  L_CAN1SetFilter22
  L_CAN1SetFilter23
  L_CAN1SetFilter24
  L_CAN1SetFilter25
  L_CAN1SetFilter26
  L_CAN1SetFilter27
  L_CAN1SetFilter28
  L_CAN1SetFilter29
  L___Lib_CAN_12_RegsToCAN1ID30
  L___Lib_CAN_12_RegsToCAN1ID31
  L_CAN1Write32
  L_CAN1Write33
  L_CAN1Write34
  L_CAN1Write35
  L_CAN1Write36
  L_CAN1Write37
  L_CAN1Write38
  L_CAN1Write39
  L_CAN1Write40
  L_CAN1Write41
  L_CAN1Write42
  L_CAN1Read43
  L_CAN1Read44
  L_CAN1Read45
  L_CAN1Read46
  L_CAN1Read47
  L_CAN1Read48
  L_CAN1Read49
  L_CAN1Read50
  L_CAN1Read51
  L_CAN1Read52
  L_CAN1Read53
  L_CAN1Read54
  L_CAN1Read55
  L_CAN1Read56
  L_CAN1Read57
  L_CAN1Read58
  L_CAN1Initialize59
  L_CAN1Initialize60
  L_CAN1Initialize61
  L_CAN1Initialize62
  L_CAN1Initialize63
  L___Lib_CAN_12_CAN2IDToRegs64
  L___Lib_CAN_12_CAN2IDToRegs65
  L___Lib_CAN_12_CAN2IDToRegs66
  L___Lib_CAN_12_CAN2IDToRegs67
  L___Lib_CAN_12_CAN2IDToRegs68
  L___Lib_CAN_12_CAN2IDToRegs69
  L___Lib_CAN_12_CAN2IDToRegs70
  L___Lib_CAN_12_CAN2IDToRegs71
  L___Lib_CAN_12_CAN2IDToRegs72
  L___Lib_CAN_12_CAN2IDToRegs73
  L___Lib_CAN_12_CAN2IDToRegs74
  L___Lib_CAN_12_CAN2IDToRegs75
  L___Lib_CAN_12_CAN2IDToRegs76
  L_CAN2SetOperationMode77
  L_CAN2SetOperationMode78
  L_CAN2SetOperationMode79
  L_CAN2SetOperationMode80
  L_CAN2SetBaudRate81
  L_CAN2SetBaudRate82
  L_CAN2SetBaudRate83
  L_CAN2SetMask84
  L_CAN2SetMask85
  L_CAN2SetFilter86
  L_CAN2SetFilter87
  L_CAN2SetFilter88
  L_CAN2SetFilter89
  L_CAN2SetFilter90
  L_CAN2SetFilter91
  L_CAN2SetFilter92
  L_CAN2SetFilter93
  L___Lib_CAN_12_RegsToCAN2ID94
  L___Lib_CAN_12_RegsToCAN2ID95
  L_CAN2Write96
  L_CAN2Write97
  L_CAN2Write98
  L_CAN2Write99
  L_CAN2Write100
  L_CAN2Write101
  L_CAN2Write102
  L_CAN2Write103
  L_CAN2Write104
  L_CAN2Write105
  L_CAN2Write106
  L_CAN2Read107
  L_CAN2Read108
  L_CAN2Read109
  L_CAN2Read110
  L_CAN2Read111
  L_CAN2Read112
  L_CAN2Read113
  L_CAN2Read114
  L_CAN2Read115
  L_CAN2Read116
  L_CAN2Read117
  L_CAN2Read118
  L_CAN2Read119
  L_CAN2Read120
  L_CAN2Read121
  L_CAN2Read122
  L_CAN2Initialize123
  L_CAN2Initialize124
  L_CAN2Initialize125
  L_CAN2Initialize126
  L_CAN2Initialize127
  L_end_CAN1IDToRegs
  __Lib_CAN_12_CAN1IDToRegs
  L___Lib_CAN_12_CAN1IDToRegs129
  L___Lib_CAN_12_CAN1IDToRegs130
  L___Lib_CAN_12_CAN1IDToRegs131
  L_end_CAN1SetOperationMode
  _CAN1SetOperationMode
  L__CAN1SetOperationMode133
  L__CAN1SetOperationMode134
  L_end_CAN1GetOperationMode
  _CAN1GetOperationMode
  L_end_CAN1SetBaudRate
  _CAN1SetBaudRate
  L_end_CAN1SetMask
  _CAN1SetMask
  L__CAN1SetMask138
  L_end_CAN1SetFilter
  _CAN1SetFilter
  L__CAN1SetFilter140
  L__CAN1SetFilter141
  L__CAN1SetFilter142
  L__CAN1SetFilter143
  L__CAN1SetFilter144
  L_end_RegsToCAN1ID
  __Lib_CAN_12_RegsToCAN1ID
  L_end_CAN1Write
  _CAN1Write
  L__CAN1Write147
  L_end_CAN1Read
  _CAN1Read
  L__CAN1Read149
  L__CAN1Read150
  L__CAN1Read151
  L_end_CAN1Initialize
  _CAN1Initialize
  L__CAN1Initialize153
  L_end_CAN2IDToRegs
  __Lib_CAN_12_CAN2IDToRegs
  L___Lib_CAN_12_CAN2IDToRegs155
  L___Lib_CAN_12_CAN2IDToRegs156
  L___Lib_CAN_12_CAN2IDToRegs157
  L_end_CAN2SetOperationMode
  _CAN2SetOperationMode
  L__CAN2SetOperationMode159
  L__CAN2SetOperationMode160
  L_end_CAN2GetOperationMode
  _CAN2GetOperationMode
  L_end_CAN2SetBaudRate
  _CAN2SetBaudRate
  L_end_CAN2SetMask
  _CAN2SetMask
  L__CAN2SetMask164
  L_end_CAN2SetFilter
  _CAN2SetFilter
  L__CAN2SetFilter166
  L__CAN2SetFilter167
  L__CAN2SetFilter168
  L__CAN2SetFilter169
  L__CAN2SetFilter170
  L_end_RegsToCAN2ID
  __Lib_CAN_12_RegsToCAN2ID
  L_end_CAN2Write
  _CAN2Write
  L__CAN2Write173
  L_end_CAN2Read
  _CAN2Read
  L__CAN2Read175
  L__CAN2Read176
  L__CAN2Read177
  L_end_CAN2Initialize
  _CAN2Initialize
  L__CAN2Initialize179
  L_TIMER5_INT0
  L_TIMER5_INT1
  L_TIMER5_INT2
  L_TIMER5_INT3
  L_TIMER5_INT4
  L_TIMER5_INT5
  L_ADC_INT6
  L_ADC_INT7
  L_ADC_INT8
  L_ADC_INT9
  L_main10
  L_main11
  L_end_canInterrupt
  _canInterrupt
  L_end_TIMER5_INT
  _TIMER5_INT
  L__TIMER5_INT14
  L__TIMER5_INT15
  L__TIMER5_INT16
  L__TIMER5_INT17
  L_end_ADC_INT
  _ADC_INT
  L__ADC_INT19
  L__ADC_INT20
  L_end_TIMER4_INT
  _TIMER4_INT
  L_end_main
  _main
  L__main_end_loop
  L_TIMER5_INT0
  L_TIMER5_INT1
  L_TIMER5_INT2
  L_TIMER5_INT3
  L_TIMER5_INT4
  L_TIMER5_INT5
  L_ADC_INT6
  L_ADC_INT7
  L_ADC_INT8
  L_ADC_INT9
  L_main10
  L_main11
  L_end_canInterrupt
  _canInterrupt
  L_end_TIMER5_INT
  _TIMER5_INT
  L__TIMER5_INT14
  L__TIMER5_INT15
  L__TIMER5_INT16
  L__TIMER5_INT17
  L_end_ADC_INT
  _ADC_INT
  L__ADC_INT19
  L__ADC_INT20
  L_end_TIMER4_INT
  _TIMER4_INT
  L_end_main
  _main
  L__main_end_loop
  L_end_FIR_Radix
  _FIR_Radix
